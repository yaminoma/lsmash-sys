/* automatically generated by rust-bindgen */

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub const __WORDSIZE : u32 = 64 ; pub const __DARWIN_ONLY_64_BIT_INO_T : u32 = 0 ; pub const __DARWIN_ONLY_VERS_1050 : u32 = 0 ; pub const __DARWIN_ONLY_UNIX_CONFORMANCE : u32 = 1 ; pub const __DARWIN_UNIX03 : u32 = 1 ; pub const __DARWIN_64_BIT_INO_T : u32 = 0 ; pub const __DARWIN_VERS_1050 : u32 = 0 ; pub const __DARWIN_NON_CANCELABLE : u32 = 0 ; pub const __DARWIN_SUF_EXTSN : & 'static [ u8 ; 14usize ] = b"$DARWIN_EXTSN\0" ; pub const __DARWIN_C_ANSI : u32 = 4096 ; pub const __DARWIN_C_FULL : u32 = 900000 ; pub const __DARWIN_C_LEVEL : u32 = 900000 ; pub const __STDC_WANT_LIB_EXT1__ : u32 = 1 ; pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE : u32 = 1 ; pub const _DARWIN_FEATURE_UNIX_CONFORMANCE : u32 = 3 ; pub const __PTHREAD_SIZE__ : u32 = 8176 ; pub const __PTHREAD_ATTR_SIZE__ : u32 = 56 ; pub const __PTHREAD_MUTEXATTR_SIZE__ : u32 = 8 ; pub const __PTHREAD_MUTEX_SIZE__ : u32 = 56 ; pub const __PTHREAD_CONDATTR_SIZE__ : u32 = 8 ; pub const __PTHREAD_COND_SIZE__ : u32 = 40 ; pub const __PTHREAD_ONCE_SIZE__ : u32 = 8 ; pub const __PTHREAD_RWLOCK_SIZE__ : u32 = 192 ; pub const __PTHREAD_RWLOCKATTR_SIZE__ : u32 = 16 ; pub const INT8_MAX : u32 = 127 ; pub const INT16_MAX : u32 = 32767 ; pub const INT32_MAX : u32 = 2147483647 ; pub const INT64_MAX : u64 = 9223372036854775807 ; pub const INT8_MIN : i32 = -128 ; pub const INT16_MIN : i32 = -32768 ; pub const INT32_MIN : i32 = -2147483648 ; pub const INT64_MIN : i64 = -9223372036854775808 ; pub const UINT8_MAX : u32 = 255 ; pub const UINT16_MAX : u32 = 65535 ; pub const UINT32_MAX : u32 = 4294967295 ; pub const UINT64_MAX : i32 = -1 ; pub const INT_LEAST8_MIN : i32 = -128 ; pub const INT_LEAST16_MIN : i32 = -32768 ; pub const INT_LEAST32_MIN : i32 = -2147483648 ; pub const INT_LEAST64_MIN : i64 = -9223372036854775808 ; pub const INT_LEAST8_MAX : u32 = 127 ; pub const INT_LEAST16_MAX : u32 = 32767 ; pub const INT_LEAST32_MAX : u32 = 2147483647 ; pub const INT_LEAST64_MAX : u64 = 9223372036854775807 ; pub const UINT_LEAST8_MAX : u32 = 255 ; pub const UINT_LEAST16_MAX : u32 = 65535 ; pub const UINT_LEAST32_MAX : u32 = 4294967295 ; pub const UINT_LEAST64_MAX : i32 = -1 ; pub const INT_FAST8_MIN : i32 = -128 ; pub const INT_FAST16_MIN : i32 = -32768 ; pub const INT_FAST32_MIN : i32 = -2147483648 ; pub const INT_FAST64_MIN : i64 = -9223372036854775808 ; pub const INT_FAST8_MAX : u32 = 127 ; pub const INT_FAST16_MAX : u32 = 32767 ; pub const INT_FAST32_MAX : u32 = 2147483647 ; pub const INT_FAST64_MAX : u64 = 9223372036854775807 ; pub const UINT_FAST8_MAX : u32 = 255 ; pub const UINT_FAST16_MAX : u32 = 65535 ; pub const UINT_FAST32_MAX : u32 = 4294967295 ; pub const UINT_FAST64_MAX : i32 = -1 ; pub const INTPTR_MAX : u64 = 9223372036854775807 ; pub const INTPTR_MIN : i64 = -9223372036854775808 ; pub const UINTPTR_MAX : i32 = -1 ; pub const INTMAX_MIN : i64 = -9223372036854775808 ; pub const INTMAX_MAX : u64 = 9223372036854775807 ; pub const UINTMAX_MAX : i32 = -1 ; pub const PTRDIFF_MIN : i64 = -9223372036854775808 ; pub const PTRDIFF_MAX : u64 = 9223372036854775807 ; pub const SIZE_MAX : i32 = -1 ; pub const RSIZE_MAX : i32 = -1 ; pub const WINT_MIN : i32 = -2147483648 ; pub const WINT_MAX : u32 = 2147483647 ; pub const SIG_ATOMIC_MIN : i32 = -2147483648 ; pub const SIG_ATOMIC_MAX : u32 = 2147483647 ; pub const LSMASH_VERSION_MAJOR : u32 = 2 ; pub const LSMASH_VERSION_MINOR : u32 = 14 ; pub const LSMASH_VERSION_MICRO : u32 = 5 ; pub const LSMASH_BOX_PRECEDENCE_L : u32 = 8388608 ; pub const LSMASH_BOX_PRECEDENCE_LP : u64 = 4503595332403200 ; pub const LSMASH_BOX_PRECEDENCE_N : u64 = 36028797018963968 ; pub const LSMASH_BOX_PRECEDENCE_HM : i64 = -4803843611164672 ; pub const LSMASH_BOX_PRECEDENCE_H : i64 = -4286578688 ; pub const LSMASH_BOX_PRECEDENCE_S : u64 = 1099511627776 ; pub const LSMASH_TIMESTAMP_UNDEFINED : i32 = -1 ; pub const ISOM_EDIT_MODE_NORMAL : u32 = 65536 ; pub const ISOM_EDIT_MODE_DWELL : u32 = 0 ; pub const ISOM_EDIT_MODE_EMPTY : i32 = -1 ; pub const ISOM_EDIT_DURATION_UNKNOWN32 : u32 = 4294967295 ; pub const ISOM_EDIT_DURATION_UNKNOWN64 : i32 = -1 ; pub const ISOM_EDIT_DURATION_IMPLICIT : u32 = 0 ; pub type wchar_t = :: std :: os :: raw :: c_int ; pub type max_align_t = f64 ; pub type int_least8_t = i8 ; pub type int_least16_t = i16 ; pub type int_least32_t = i32 ; pub type int_least64_t = i64 ; pub type uint_least8_t = u8 ; pub type uint_least16_t = u16 ; pub type uint_least32_t = u32 ; pub type uint_least64_t = u64 ; pub type int_fast8_t = i8 ; pub type int_fast16_t = i16 ; pub type int_fast32_t = i32 ; pub type int_fast64_t = i64 ; pub type uint_fast8_t = u8 ; pub type uint_fast16_t = u16 ; pub type uint_fast32_t = u32 ; pub type uint_fast64_t = u64 ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_longlong ; pub type __uint64_t = :: std :: os :: raw :: c_ulonglong ; pub type __darwin_intptr_t = :: std :: os :: raw :: c_long ; pub type __darwin_natural_t = :: std :: os :: raw :: c_uint ; pub type __darwin_ct_rune_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t { pub __mbstate8 : [ :: std :: os :: raw :: c_char ; 128usize ] , pub _mbstateL : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 16usize ] , } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __mbstate8 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __mbstate8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . _mbstateL as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( _mbstateL ) ) ) ; } pub type __darwin_mbstate_t = __mbstate_t ; pub type __darwin_ptrdiff_t = :: std :: os :: raw :: c_long ; pub type __darwin_size_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_va_list = __builtin_va_list ; pub type __darwin_wchar_t = :: std :: os :: raw :: c_int ; pub type __darwin_rune_t = __darwin_wchar_t ; pub type __darwin_wint_t = :: std :: os :: raw :: c_int ; pub type __darwin_clock_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_socklen_t = __uint32_t ; pub type __darwin_ssize_t = :: std :: os :: raw :: c_long ; pub type __darwin_time_t = :: std :: os :: raw :: c_long ; pub type __darwin_blkcnt_t = __int64_t ; pub type __darwin_blksize_t = __int32_t ; pub type __darwin_dev_t = __int32_t ; pub type __darwin_fsblkcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_fsfilcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_gid_t = __uint32_t ; pub type __darwin_id_t = __uint32_t ; pub type __darwin_ino64_t = __uint64_t ; pub type __darwin_ino_t = __uint32_t ; pub type __darwin_mach_port_name_t = __darwin_natural_t ; pub type __darwin_mach_port_t = __darwin_mach_port_name_t ; pub type __darwin_mode_t = __uint16_t ; pub type __darwin_off_t = __int64_t ; pub type __darwin_pid_t = __int32_t ; pub type __darwin_sigset_t = __uint32_t ; pub type __darwin_suseconds_t = __int32_t ; pub type __darwin_uid_t = __uint32_t ; pub type __darwin_useconds_t = __uint32_t ; pub type __darwin_uuid_t = [ :: std :: os :: raw :: c_uchar ; 16usize ] ; pub type __darwin_uuid_string_t = [ :: std :: os :: raw :: c_char ; 37usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_pthread_handler_rec { pub __routine : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub __arg : * mut :: std :: os :: raw :: c_void , pub __next : * mut __darwin_pthread_handler_rec , } # [ test ] fn bindgen_test_layout___darwin_pthread_handler_rec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_pthread_handler_rec > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_pthread_handler_rec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_pthread_handler_rec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_pthread_handler_rec > ( ) ) ) . __routine as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __routine ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_pthread_handler_rec > ( ) ) ) . __arg as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_pthread_handler_rec > ( ) ) ) . __next as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_attr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 56usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_attr_t > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_attr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_attr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_attr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_attr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_cond_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 40usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_cond_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_cond_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_cond_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_cond_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_condattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_condattr_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_condattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_condattr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_condattr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_mutex_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 56usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_mutex_t > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutex_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutex_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutex_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutex_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_mutexattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_mutexattr_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_mutexattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutexattr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutexattr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_once_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_once_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_once_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_once_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_once_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_once_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_once_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_once_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_rwlock_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 192usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_rwlock_t > ( ) , 200usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlock_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlock_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_rwlockattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 16usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_rwlockattr_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlockattr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlockattr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_t { pub __sig : :: std :: os :: raw :: c_long , pub __cleanup_stack : * mut __darwin_pthread_handler_rec , pub __opaque : [ :: std :: os :: raw :: c_char ; 8176usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_t > ( ) , 8192usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_t > ( ) ) ) . __cleanup_stack as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __cleanup_stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_t > ( ) ) ) . __opaque as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __opaque ) ) ) ; } pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t ; pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t ; pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t ; pub type __darwin_pthread_key_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t ; pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t ; pub type __darwin_pthread_once_t = _opaque_pthread_once_t ; pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t ; pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t ; pub type __darwin_pthread_t = * mut _opaque_pthread_t ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulonglong ; pub type register_t = i64 ; pub type user_addr_t = u_int64_t ; pub type user_size_t = u_int64_t ; pub type user_ssize_t = i64 ; pub type user_long_t = i64 ; pub type user_ulong_t = u_int64_t ; pub type user_time_t = i64 ; pub type user_off_t = i64 ; pub type syscall_arg_t = u_int64_t ; pub type intmax_t = :: std :: os :: raw :: c_long ; pub type uintmax_t = :: std :: os :: raw :: c_ulong ; pub const LSMASH_ERR_NAMELESS : _bindgen_ty_1 = -1 ; pub const LSMASH_ERR_MEMORY_ALLOC : _bindgen_ty_1 = -2 ; pub const LSMASH_ERR_INVALID_DATA : _bindgen_ty_1 = -3 ; pub const LSMASH_ERR_FUNCTION_PARAM : _bindgen_ty_1 = -4 ; pub const LSMASH_ERR_PATCH_WELCOME : _bindgen_ty_1 = -5 ; pub const LSMASH_ERR_UNKNOWN : _bindgen_ty_1 = -6 ; pub const LSMASH_ERR_IO : _bindgen_ty_1 = -7 ; 
 /// Error Values 
 pub type _bindgen_ty_1 = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_root_tag { _unused : [ u8 ; 0 ] , } 
 /// ROOT
/// The top-level opaque handler for whole file handling. 
 pub type lsmash_root_t = lsmash_root_tag ; extern "C" { # [ link_name = "\u{1}_lsmash_create_root" ] pub fn lsmash_create_root ( ) -> * mut lsmash_root_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_root" ] pub fn lsmash_destroy_root ( root : * mut lsmash_root_t ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_file_tag { _unused : [ u8 ; 0 ] , } 
 /// File Layer 
 pub type lsmash_file_t = lsmash_file_tag ; pub const lsmash_file_mode_LSMASH_FILE_MODE_WRITE : lsmash_file_mode = 1 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_READ : lsmash_file_mode = 2 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_FRAGMENTED : lsmash_file_mode = 4 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_DUMP : lsmash_file_mode = 8 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_BOX : lsmash_file_mode = 16 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_INITIALIZATION : lsmash_file_mode = 32 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_MEDIA : lsmash_file_mode = 64 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_INDEX : lsmash_file_mode = 128 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_SEGMENT : lsmash_file_mode = 256 ; pub const lsmash_file_mode_LSMASH_FILE_MODE_WRITE_FRAGMENTED : lsmash_file_mode = 5 ; pub type lsmash_file_mode = u32 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3G2A : lsmash_brand_type = 862401121 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GE6 : lsmash_brand_type = 862414134 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GE9 : lsmash_brand_type = 862414137 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GF9 : lsmash_brand_type = 862414393 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GG6 : lsmash_brand_type = 862414646 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GG9 : lsmash_brand_type = 862414649 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GH9 : lsmash_brand_type = 862414905 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GM9 : lsmash_brand_type = 862416185 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GP4 : lsmash_brand_type = 862416948 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GP5 : lsmash_brand_type = 862416949 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GP6 : lsmash_brand_type = 862416950 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GP7 : lsmash_brand_type = 862416951 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GP8 : lsmash_brand_type = 862416952 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GP9 : lsmash_brand_type = 862416953 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GR6 : lsmash_brand_type = 862417462 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GR9 : lsmash_brand_type = 862417465 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GS6 : lsmash_brand_type = 862417718 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GS9 : lsmash_brand_type = 862417721 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_3GT9 : lsmash_brand_type = 862417977 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ARRI : lsmash_brand_type = 1095914057 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_CAEP : lsmash_brand_type = 1128351056 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_CDES : lsmash_brand_type = 1128555891 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_LCAG : lsmash_brand_type = 1279476039 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_M4A : lsmash_brand_type = 1295270176 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_M4B : lsmash_brand_type = 1295270432 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_M4P : lsmash_brand_type = 1295274016 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_M4V : lsmash_brand_type = 1295275552 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MFSM : lsmash_brand_type = 1296454477 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MPPI : lsmash_brand_type = 1297109065 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ROSS : lsmash_brand_type = 1380930387 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_AVC1 : lsmash_brand_type = 1635148593 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_BBXM : lsmash_brand_type = 1650620525 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_CAQV : lsmash_brand_type = 1667330422 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_CCFF : lsmash_brand_type = 1667458662 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA0A : lsmash_brand_type = 1684090977 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA0B : lsmash_brand_type = 1684090978 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA1A : lsmash_brand_type = 1684091233 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA1B : lsmash_brand_type = 1684091234 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA2A : lsmash_brand_type = 1684091489 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA2B : lsmash_brand_type = 1684091490 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA3A : lsmash_brand_type = 1684091745 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DA3B : lsmash_brand_type = 1684091746 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DASH : lsmash_brand_type = 1684108136 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DBY1 : lsmash_brand_type = 1684175153 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DMB1 : lsmash_brand_type = 1684890161 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DSMS : lsmash_brand_type = 1685286259 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DV1A : lsmash_brand_type = 1685467489 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DV1B : lsmash_brand_type = 1685467490 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DV2A : lsmash_brand_type = 1685467745 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DV2B : lsmash_brand_type = 1685467746 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DV3A : lsmash_brand_type = 1685468001 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DV3B : lsmash_brand_type = 1685468002 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DVR1 : lsmash_brand_type = 1685484081 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_DVT1 : lsmash_brand_type = 1685484593 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_IFRM : lsmash_brand_type = 1768321645 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISC2 : lsmash_brand_type = 1769169714 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISO2 : lsmash_brand_type = 1769172786 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISO3 : lsmash_brand_type = 1769172787 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISO4 : lsmash_brand_type = 1769172788 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISO5 : lsmash_brand_type = 1769172789 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISO6 : lsmash_brand_type = 1769172790 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISO7 : lsmash_brand_type = 1769172791 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ISOM : lsmash_brand_type = 1769172845 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_JPSI : lsmash_brand_type = 1785754473 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_LMSG : lsmash_brand_type = 1819112295 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MJ2S : lsmash_brand_type = 1835676275 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MJP2 : lsmash_brand_type = 1835692082 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MP21 : lsmash_brand_type = 1836069425 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MP41 : lsmash_brand_type = 1836069937 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MP42 : lsmash_brand_type = 1836069938 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MP71 : lsmash_brand_type = 1836070705 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MSDH : lsmash_brand_type = 1836278888 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_MSIX : lsmash_brand_type = 1836280184 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_NIKO : lsmash_brand_type = 1852402543 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_ODCF : lsmash_brand_type = 1868850022 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_OPF2 : lsmash_brand_type = 1869637170 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_OPX2 : lsmash_brand_type = 1869641778 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_PANA : lsmash_brand_type = 1885433441 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_PIFF : lsmash_brand_type = 1885955686 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_PNVI : lsmash_brand_type = 1886287465 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_QT : lsmash_brand_type = 1903435808 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_RISX : lsmash_brand_type = 1919513464 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_SDV : lsmash_brand_type = 1935963680 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_SIMS : lsmash_brand_type = 1936289139 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_SISX : lsmash_brand_type = 1936290680 ; pub const lsmash_brand_type_ISOM_BRAND_TYPE_SSSS : lsmash_brand_type = 1936946035 ; pub type lsmash_brand_type = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_file_parameters_t { pub mode : lsmash_file_mode , 
 /// custom I/O stuff 
 pub opaque : * mut :: std :: os :: raw :: c_void , pub read : :: std :: option :: Option < unsafe extern "C" fn ( opaque : * mut :: std :: os :: raw :: c_void , buf : * mut u8 , size : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > , pub write : :: std :: option :: Option < unsafe extern "C" fn ( opaque : * mut :: std :: os :: raw :: c_void , buf : * mut u8 , size : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > , pub seek : :: std :: option :: Option < unsafe extern "C" fn ( opaque : * mut :: std :: os :: raw :: c_void , offset : i64 , whence : :: std :: os :: raw :: c_int ) -> i64 > , 
 /// file types or segment types 
 pub major_brand : lsmash_brand_type , pub brands : * mut lsmash_brand_type , pub brand_count : u32 , pub minor_version : u32 , 
 /// muxing only 
 pub max_chunk_duration : f64 , pub max_async_tolerance : f64 , pub max_chunk_size : u64 , 
 /// demuxing only 
 pub max_read_size : u64 , } # [ test ] fn bindgen_test_layout_lsmash_file_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_file_parameters_t > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( lsmash_file_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_file_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_file_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . mode as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( opaque ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . read as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( read ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . write as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( write ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . seek as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( seek ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . major_brand as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( major_brand ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . brands as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( brands ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . brand_count as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( brand_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . minor_version as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( minor_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . max_chunk_duration as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( max_chunk_duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . max_async_tolerance as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( max_async_tolerance ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . max_chunk_size as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( max_chunk_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_file_parameters_t > ( ) ) ) . max_read_size as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_file_parameters_t ) , "::" , stringify ! ( max_read_size ) ) ) ; } pub type lsmash_adhoc_remux_callback = :: std :: option :: Option < unsafe extern "C" fn ( param : * mut :: std :: os :: raw :: c_void , done : u64 , total : u64 ) -> :: std :: os :: raw :: c_int > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_adhoc_remux_t { pub buffer_size : u64 , pub func : lsmash_adhoc_remux_callback , pub param : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_lsmash_adhoc_remux_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_adhoc_remux_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( lsmash_adhoc_remux_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_adhoc_remux_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_adhoc_remux_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_adhoc_remux_t > ( ) ) ) . buffer_size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_adhoc_remux_t ) , "::" , stringify ! ( buffer_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_adhoc_remux_t > ( ) ) ) . func as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_adhoc_remux_t ) , "::" , stringify ! ( func ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_adhoc_remux_t > ( ) ) ) . param as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_adhoc_remux_t ) , "::" , stringify ! ( param ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_open_file" ] pub fn lsmash_open_file ( filename : * const :: std :: os :: raw :: c_char , open_mode : :: std :: os :: raw :: c_int , param : * mut lsmash_file_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_close_file" ] pub fn lsmash_close_file ( param : * mut lsmash_file_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_file" ] pub fn lsmash_set_file ( root : * mut lsmash_root_t , param : * mut lsmash_file_parameters_t ) -> * mut lsmash_file_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_read_file" ] pub fn lsmash_read_file ( file : * mut lsmash_file_t , param : * mut lsmash_file_parameters_t ) -> i64 ; } extern "C" { # [ link_name = "\u{1}_lsmash_discard_boxes" ] pub fn lsmash_discard_boxes ( root : * mut lsmash_root_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_activate_file" ] pub fn lsmash_activate_file ( root : * mut lsmash_root_t , file : * mut lsmash_file_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_switch_media_segment" ] pub fn lsmash_switch_media_segment ( root : * mut lsmash_root_t , successor : * mut lsmash_file_t , remux : * mut lsmash_adhoc_remux_t ) -> :: std :: os :: raw :: c_int ; } 
 /// Basic Types 
 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_rational_u32_t { pub n : u32 , pub d : u32 , } # [ test ] fn bindgen_test_layout_lsmash_rational_u32_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_rational_u32_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_rational_u32_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_rational_u32_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_rational_u32_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_rational_u32_t > ( ) ) ) . n as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_rational_u32_t ) , "::" , stringify ! ( n ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_rational_u32_t > ( ) ) ) . d as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_rational_u32_t ) , "::" , stringify ! ( d ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_rational_s32_t { pub n : i32 , pub d : u32 , } # [ test ] fn bindgen_test_layout_lsmash_rational_s32_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_rational_s32_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_rational_s32_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_rational_s32_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_rational_s32_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_rational_s32_t > ( ) ) ) . n as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_rational_s32_t ) , "::" , stringify ! ( n ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_rational_s32_t > ( ) ) ) . d as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_rational_s32_t ) , "::" , stringify ! ( d ) ) ) ; } pub const lsmash_boolean_t_LSMASH_BOOLEAN_FALSE : lsmash_boolean_t = 0 ; pub const lsmash_boolean_t_LSMASH_BOOLEAN_TRUE : lsmash_boolean_t = 1 ; pub type lsmash_boolean_t = u32 ; extern "C" { 
 /// Allocation 
 # [ link_name = "\u{1}_lsmash_malloc" ] pub fn lsmash_malloc ( size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { # [ link_name = "\u{1}_lsmash_malloc_zero" ] pub fn lsmash_malloc_zero ( size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { # [ link_name = "\u{1}_lsmash_realloc" ] pub fn lsmash_realloc ( ptr : * mut :: std :: os :: raw :: c_void , size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { # [ link_name = "\u{1}_lsmash_memdup" ] pub fn lsmash_memdup ( ptr : * const :: std :: os :: raw :: c_void , size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { # [ link_name = "\u{1}_lsmash_free" ] pub fn lsmash_free ( ptr : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_freep" ] pub fn lsmash_freep ( ptrptr : * mut :: std :: os :: raw :: c_void ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_box_tag { _unused : [ u8 ; 0 ] , } 
 /// Box 
 pub type lsmash_box_t = lsmash_box_tag ; pub type lsmash_compact_box_type_t = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_extended_box_type_t { pub fourcc : u32 , pub id : [ u8 ; 12usize ] , } # [ test ] fn bindgen_test_layout_lsmash_extended_box_type_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_extended_box_type_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_extended_box_type_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_extended_box_type_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_extended_box_type_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_extended_box_type_t > ( ) ) ) . fourcc as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_extended_box_type_t ) , "::" , stringify ! ( fourcc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_extended_box_type_t > ( ) ) ) . id as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_extended_box_type_t ) , "::" , stringify ! ( id ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_box_type_t { pub fourcc : lsmash_compact_box_type_t , pub user : lsmash_extended_box_type_t , } # [ test ] fn bindgen_test_layout_lsmash_box_type_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_box_type_t > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( lsmash_box_type_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_box_type_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_box_type_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_box_type_t > ( ) ) ) . fourcc as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_box_type_t ) , "::" , stringify ! ( fourcc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_box_type_t > ( ) ) ) . user as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_box_type_t ) , "::" , stringify ! ( user ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_box_path_t { pub type_ : lsmash_box_type_t , pub number : u32 , } # [ test ] fn bindgen_test_layout_lsmash_box_path_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_box_path_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( lsmash_box_path_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_box_path_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_box_path_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_box_path_t > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_box_path_t ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_box_path_t > ( ) ) ) . number as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_box_path_t ) , "::" , stringify ! ( number ) ) ) ; } extern "C" { # [ link_name = "\u{1}_static_lsmash_box_type_unspecified" ] pub static mut static_lsmash_box_type_unspecified : lsmash_box_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_form_extended_box_type" ] pub fn lsmash_form_extended_box_type ( fourcc : u32 , id : * const u8 ) -> lsmash_extended_box_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_form_box_type" ] pub fn lsmash_form_box_type ( type_ : lsmash_compact_box_type_t , user : lsmash_extended_box_type_t ) -> lsmash_box_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_form_iso_box_type" ] pub fn lsmash_form_iso_box_type ( type_ : lsmash_compact_box_type_t ) -> lsmash_box_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_form_qtff_box_type" ] pub fn lsmash_form_qtff_box_type ( type_ : lsmash_compact_box_type_t ) -> lsmash_box_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_box_type_identical" ] pub fn lsmash_check_box_type_identical ( a : lsmash_box_type_t , b : lsmash_box_type_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_box_type_specified" ] pub fn lsmash_check_box_type_specified ( box_type : * const lsmash_box_type_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_box" ] pub fn lsmash_create_box ( type_ : lsmash_box_type_t , data : * mut u8 , size : u32 , precedence : u64 ) -> * mut lsmash_box_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_box" ] pub fn lsmash_get_box ( parent : * mut lsmash_box_t , box_path : * const lsmash_box_path_t ) -> * mut lsmash_box_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_add_box" ] pub fn lsmash_add_box ( parent : * mut lsmash_box_t , box_ : * mut lsmash_box_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_add_box_ex" ] pub fn lsmash_add_box_ex ( parent : * mut lsmash_box_t , box_ : * mut * mut lsmash_box_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_box" ] pub fn lsmash_destroy_box ( box_ : * mut lsmash_box_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_children" ] pub fn lsmash_destroy_children ( box_ : * mut lsmash_box_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_box_precedence" ] pub fn lsmash_get_box_precedence ( box_ : * mut lsmash_box_t , precedence : * mut u64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_root_as_box" ] pub fn lsmash_root_as_box ( root : * mut lsmash_root_t ) -> * mut lsmash_box_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_file_as_box" ] pub fn lsmash_file_as_box ( file : * mut lsmash_file_t ) -> * mut lsmash_box_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_write_top_level_box" ] pub fn lsmash_write_top_level_box ( box_ : * mut lsmash_box_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_export_box" ] pub fn lsmash_export_box ( box_ : * mut lsmash_box_t , size : * mut u32 ) -> * mut u8 ; } 
 /// CODEC identifiers 
 pub type lsmash_codec_type_t = lsmash_box_type_t ; extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_AC_3_AUDIO" ] pub static mut ISOM_CODEC_TYPE_AC_3_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_ALAC_AUDIO" ] pub static mut ISOM_CODEC_TYPE_ALAC_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DRA1_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DRA1_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSEL_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSEL_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSDL_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSDL_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSC_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSC_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSE_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSE_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSH_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSH_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSL_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSL_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DTSX_AUDIO" ] pub static mut ISOM_CODEC_TYPE_DTSX_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_EC_3_AUDIO" ] pub static mut ISOM_CODEC_TYPE_EC_3_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_ENCA_AUDIO" ] pub static mut ISOM_CODEC_TYPE_ENCA_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_G719_AUDIO" ] pub static mut ISOM_CODEC_TYPE_G719_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_G726_AUDIO" ] pub static mut ISOM_CODEC_TYPE_G726_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_M4AE_AUDIO" ] pub static mut ISOM_CODEC_TYPE_M4AE_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MLPA_AUDIO" ] pub static mut ISOM_CODEC_TYPE_MLPA_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MP4A_AUDIO" ] pub static mut ISOM_CODEC_TYPE_MP4A_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_RAW_AUDIO" ] pub static mut ISOM_CODEC_TYPE_RAW_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SAMR_AUDIO" ] pub static mut ISOM_CODEC_TYPE_SAMR_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SAWB_AUDIO" ] pub static mut ISOM_CODEC_TYPE_SAWB_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SAWP_AUDIO" ] pub static mut ISOM_CODEC_TYPE_SAWP_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SEVC_AUDIO" ] pub static mut ISOM_CODEC_TYPE_SEVC_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SQCP_AUDIO" ] pub static mut ISOM_CODEC_TYPE_SQCP_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SSMV_AUDIO" ] pub static mut ISOM_CODEC_TYPE_SSMV_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_TWOS_AUDIO" ] pub static mut ISOM_CODEC_TYPE_TWOS_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_WMA_AUDIO" ] pub static mut ISOM_CODEC_TYPE_WMA_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_23NI_AUDIO" ] pub static mut QT_CODEC_TYPE_23NI_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_MAC3_AUDIO" ] pub static mut QT_CODEC_TYPE_MAC3_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_MAC6_AUDIO" ] pub static mut QT_CODEC_TYPE_MAC6_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_NONE_AUDIO" ] pub static mut QT_CODEC_TYPE_NONE_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_QDM2_AUDIO" ] pub static mut QT_CODEC_TYPE_QDM2_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_QDMC_AUDIO" ] pub static mut QT_CODEC_TYPE_QDMC_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_QCLP_AUDIO" ] pub static mut QT_CODEC_TYPE_QCLP_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_AC_3_AUDIO" ] pub static mut QT_CODEC_TYPE_AC_3_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_AGSM_AUDIO" ] pub static mut QT_CODEC_TYPE_AGSM_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ALAC_AUDIO" ] pub static mut QT_CODEC_TYPE_ALAC_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ALAW_AUDIO" ] pub static mut QT_CODEC_TYPE_ALAW_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_CDX2_AUDIO" ] pub static mut QT_CODEC_TYPE_CDX2_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_CDX4_AUDIO" ] pub static mut QT_CODEC_TYPE_CDX4_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVCA_AUDIO" ] pub static mut QT_CODEC_TYPE_DVCA_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVI_AUDIO" ] pub static mut QT_CODEC_TYPE_DVI_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_FL32_AUDIO" ] pub static mut QT_CODEC_TYPE_FL32_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_FL64_AUDIO" ] pub static mut QT_CODEC_TYPE_FL64_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_IMA4_AUDIO" ] pub static mut QT_CODEC_TYPE_IMA4_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_IN24_AUDIO" ] pub static mut QT_CODEC_TYPE_IN24_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_IN32_AUDIO" ] pub static mut QT_CODEC_TYPE_IN32_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_LPCM_AUDIO" ] pub static mut QT_CODEC_TYPE_LPCM_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_MP4A_AUDIO" ] pub static mut QT_CODEC_TYPE_MP4A_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_RAW_AUDIO" ] pub static mut QT_CODEC_TYPE_RAW_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SOWT_AUDIO" ] pub static mut QT_CODEC_TYPE_SOWT_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_TWOS_AUDIO" ] pub static mut QT_CODEC_TYPE_TWOS_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULAW_AUDIO" ] pub static mut QT_CODEC_TYPE_ULAW_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_VDVA_AUDIO" ] pub static mut QT_CODEC_TYPE_VDVA_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_FULLMP3_AUDIO" ] pub static mut QT_CODEC_TYPE_FULLMP3_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_MP3_AUDIO" ] pub static mut QT_CODEC_TYPE_MP3_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ADPCM2_AUDIO" ] pub static mut QT_CODEC_TYPE_ADPCM2_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ADPCM17_AUDIO" ] pub static mut QT_CODEC_TYPE_ADPCM17_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_GSM49_AUDIO" ] pub static mut QT_CODEC_TYPE_GSM49_AUDIO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_NOT_SPECIFIED" ] pub static mut QT_CODEC_TYPE_NOT_SPECIFIED : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_AVC1_VIDEO" ] pub static mut ISOM_CODEC_TYPE_AVC1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_AVC2_VIDEO" ] pub static mut ISOM_CODEC_TYPE_AVC2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_AVC3_VIDEO" ] pub static mut ISOM_CODEC_TYPE_AVC3_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_AVC4_VIDEO" ] pub static mut ISOM_CODEC_TYPE_AVC4_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_AVCP_VIDEO" ] pub static mut ISOM_CODEC_TYPE_AVCP_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_DRAC_VIDEO" ] pub static mut ISOM_CODEC_TYPE_DRAC_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_ENCV_VIDEO" ] pub static mut ISOM_CODEC_TYPE_ENCV_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_HVC1_VIDEO" ] pub static mut ISOM_CODEC_TYPE_HVC1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_HEV1_VIDEO" ] pub static mut ISOM_CODEC_TYPE_HEV1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MJP2_VIDEO" ] pub static mut ISOM_CODEC_TYPE_MJP2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MP4V_VIDEO" ] pub static mut ISOM_CODEC_TYPE_MP4V_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MVC1_VIDEO" ] pub static mut ISOM_CODEC_TYPE_MVC1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MVC2_VIDEO" ] pub static mut ISOM_CODEC_TYPE_MVC2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_S263_VIDEO" ] pub static mut ISOM_CODEC_TYPE_S263_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SVC1_VIDEO" ] pub static mut ISOM_CODEC_TYPE_SVC1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_VC_1_VIDEO" ] pub static mut ISOM_CODEC_TYPE_VC_1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_2VUY_VIDEO" ] pub static mut QT_CODEC_TYPE_2VUY_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_CFHD_VIDEO" ] pub static mut QT_CODEC_TYPE_CFHD_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DV10_VIDEO" ] pub static mut QT_CODEC_TYPE_DV10_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVOO_VIDEO" ] pub static mut QT_CODEC_TYPE_DVOO_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVOR_VIDEO" ] pub static mut QT_CODEC_TYPE_DVOR_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVTV_VIDEO" ] pub static mut QT_CODEC_TYPE_DVTV_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVVT_VIDEO" ] pub static mut QT_CODEC_TYPE_DVVT_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_HD10_VIDEO" ] pub static mut QT_CODEC_TYPE_HD10_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_M105_VIDEO" ] pub static mut QT_CODEC_TYPE_M105_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_PNTG_VIDEO" ] pub static mut QT_CODEC_TYPE_PNTG_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SVQ1_VIDEO" ] pub static mut QT_CODEC_TYPE_SVQ1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SVQ3_VIDEO" ] pub static mut QT_CODEC_TYPE_SVQ3_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SHR0_VIDEO" ] pub static mut QT_CODEC_TYPE_SHR0_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SHR1_VIDEO" ] pub static mut QT_CODEC_TYPE_SHR1_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SHR2_VIDEO" ] pub static mut QT_CODEC_TYPE_SHR2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SHR3_VIDEO" ] pub static mut QT_CODEC_TYPE_SHR3_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_SHR4_VIDEO" ] pub static mut QT_CODEC_TYPE_SHR4_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_WRLE_VIDEO" ] pub static mut QT_CODEC_TYPE_WRLE_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_APCH_VIDEO" ] pub static mut QT_CODEC_TYPE_APCH_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_APCN_VIDEO" ] pub static mut QT_CODEC_TYPE_APCN_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_APCS_VIDEO" ] pub static mut QT_CODEC_TYPE_APCS_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_APCO_VIDEO" ] pub static mut QT_CODEC_TYPE_APCO_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_AP4H_VIDEO" ] pub static mut QT_CODEC_TYPE_AP4H_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_AP4X_VIDEO" ] pub static mut QT_CODEC_TYPE_AP4X_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_CIVD_VIDEO" ] pub static mut QT_CODEC_TYPE_CIVD_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DRAC_VIDEO" ] pub static mut QT_CODEC_TYPE_DRAC_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVC_VIDEO" ] pub static mut QT_CODEC_TYPE_DVC_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVCP_VIDEO" ] pub static mut QT_CODEC_TYPE_DVCP_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVPP_VIDEO" ] pub static mut QT_CODEC_TYPE_DVPP_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DV5N_VIDEO" ] pub static mut QT_CODEC_TYPE_DV5N_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DV5P_VIDEO" ] pub static mut QT_CODEC_TYPE_DV5P_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVH2_VIDEO" ] pub static mut QT_CODEC_TYPE_DVH2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVH3_VIDEO" ] pub static mut QT_CODEC_TYPE_DVH3_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVH5_VIDEO" ] pub static mut QT_CODEC_TYPE_DVH5_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVH6_VIDEO" ] pub static mut QT_CODEC_TYPE_DVH6_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVHP_VIDEO" ] pub static mut QT_CODEC_TYPE_DVHP_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_DVHQ_VIDEO" ] pub static mut QT_CODEC_TYPE_DVHQ_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_FLIC_VIDEO" ] pub static mut QT_CODEC_TYPE_FLIC_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_GIF_VIDEO" ] pub static mut QT_CODEC_TYPE_GIF_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_H261_VIDEO" ] pub static mut QT_CODEC_TYPE_H261_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_H263_VIDEO" ] pub static mut QT_CODEC_TYPE_H263_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_JPEG_VIDEO" ] pub static mut QT_CODEC_TYPE_JPEG_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_MJPA_VIDEO" ] pub static mut QT_CODEC_TYPE_MJPA_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_MJPB_VIDEO" ] pub static mut QT_CODEC_TYPE_MJPB_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_PNG_VIDEO" ] pub static mut QT_CODEC_TYPE_PNG_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_RAW_VIDEO" ] pub static mut QT_CODEC_TYPE_RAW_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_RLE_VIDEO" ] pub static mut QT_CODEC_TYPE_RLE_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_RPZA_VIDEO" ] pub static mut QT_CODEC_TYPE_RPZA_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_TGA_VIDEO" ] pub static mut QT_CODEC_TYPE_TGA_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_TIFF_VIDEO" ] pub static mut QT_CODEC_TYPE_TIFF_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULRA_VIDEO" ] pub static mut QT_CODEC_TYPE_ULRA_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULRG_VIDEO" ] pub static mut QT_CODEC_TYPE_ULRG_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULY0_VIDEO" ] pub static mut QT_CODEC_TYPE_ULY0_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULY2_VIDEO" ] pub static mut QT_CODEC_TYPE_ULY2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULH0_VIDEO" ] pub static mut QT_CODEC_TYPE_ULH0_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_ULH2_VIDEO" ] pub static mut QT_CODEC_TYPE_ULH2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_UQY2_VIDEO" ] pub static mut QT_CODEC_TYPE_UQY2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_V210_VIDEO" ] pub static mut QT_CODEC_TYPE_V210_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_V216_VIDEO" ] pub static mut QT_CODEC_TYPE_V216_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_V308_VIDEO" ] pub static mut QT_CODEC_TYPE_V308_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_V408_VIDEO" ] pub static mut QT_CODEC_TYPE_V408_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_V410_VIDEO" ] pub static mut QT_CODEC_TYPE_V410_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_YUV2_VIDEO" ] pub static mut QT_CODEC_TYPE_YUV2_VIDEO : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_ENCT_TEXT" ] pub static mut ISOM_CODEC_TYPE_ENCT_TEXT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_STPP_TEXT" ] pub static mut ISOM_CODEC_TYPE_STPP_TEXT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_TX3G_TEXT" ] pub static mut ISOM_CODEC_TYPE_TX3G_TEXT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_QT_CODEC_TYPE_TEXT_TEXT" ] pub static mut QT_CODEC_TYPE_TEXT_TEXT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_FDP_HINT" ] pub static mut ISOM_CODEC_TYPE_FDP_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_M2TS_HINT" ] pub static mut ISOM_CODEC_TYPE_M2TS_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_PM2T_HINT" ] pub static mut ISOM_CODEC_TYPE_PM2T_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_PRTP_HINT" ] pub static mut ISOM_CODEC_TYPE_PRTP_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_RM2T_HINT" ] pub static mut ISOM_CODEC_TYPE_RM2T_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_RRTP_HINT" ] pub static mut ISOM_CODEC_TYPE_RRTP_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_RSRP_HINT" ] pub static mut ISOM_CODEC_TYPE_RSRP_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_RTP_HINT" ] pub static mut ISOM_CODEC_TYPE_RTP_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SM2T_HINT" ] pub static mut ISOM_CODEC_TYPE_SM2T_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SRTP_HINT" ] pub static mut ISOM_CODEC_TYPE_SRTP_HINT : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_IXSE_META" ] pub static mut ISOM_CODEC_TYPE_IXSE_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_METT_META" ] pub static mut ISOM_CODEC_TYPE_METT_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_METX_META" ] pub static mut ISOM_CODEC_TYPE_METX_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MLIX_META" ] pub static mut ISOM_CODEC_TYPE_MLIX_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_OKSD_META" ] pub static mut ISOM_CODEC_TYPE_OKSD_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_SVCM_META" ] pub static mut ISOM_CODEC_TYPE_SVCM_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_TEXT_META" ] pub static mut ISOM_CODEC_TYPE_TEXT_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_URIM_META" ] pub static mut ISOM_CODEC_TYPE_URIM_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_XML_META" ] pub static mut ISOM_CODEC_TYPE_XML_META : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_ENCS_SYSTEM" ] pub static mut ISOM_CODEC_TYPE_ENCS_SYSTEM : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_ISOM_CODEC_TYPE_MP4S_SYSTEM" ] pub static mut ISOM_CODEC_TYPE_MP4S_SYSTEM : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_LSMASH_CODEC_TYPE_RAW" ] pub static mut LSMASH_CODEC_TYPE_RAW : lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_codec_type_identical" ] pub fn lsmash_check_codec_type_identical ( a : lsmash_codec_type_t , b : lsmash_codec_type_t ) -> :: std :: os :: raw :: c_int ; } pub const lsmash_summary_type_LSMASH_SUMMARY_TYPE_UNKNOWN : lsmash_summary_type = 0 ; pub const lsmash_summary_type_LSMASH_SUMMARY_TYPE_VIDEO : lsmash_summary_type = 1 ; pub const lsmash_summary_type_LSMASH_SUMMARY_TYPE_AUDIO : lsmash_summary_type = 2 ; 
 /// Summary of Stream Configuration
/// This is L-SMASH's original structure. 
 pub type lsmash_summary_type = u32 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_UNSPECIFIED : lsmash_codec_specific_data_type = -1 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_UNKNOWN : lsmash_codec_specific_data_type = 0 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_MP4SYS_DECODER_CONFIG : lsmash_codec_specific_data_type = 1 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_VIDEO_H264 : lsmash_codec_specific_data_type = 2 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_VIDEO_HEVC : lsmash_codec_specific_data_type = 3 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_VIDEO_VC_1 : lsmash_codec_specific_data_type = 4 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_AUDIO_AC_3 : lsmash_codec_specific_data_type = 5 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_AUDIO_EC_3 : lsmash_codec_specific_data_type = 6 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_AUDIO_DTS : lsmash_codec_specific_data_type = 7 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_AUDIO_ALAC : lsmash_codec_specific_data_type = 8 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_VIDEO_SAMPLE_SCALE : lsmash_codec_specific_data_type = 9 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_ISOM_VIDEO_H264_BITRATE : lsmash_codec_specific_data_type = 10 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_VIDEO_COMMON : lsmash_codec_specific_data_type = 11 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_AUDIO_COMMON : lsmash_codec_specific_data_type = 12 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_AUDIO_FORMAT_SPECIFIC_FLAGS : lsmash_codec_specific_data_type = 13 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_AUDIO_DECOMPRESSION_PARAMETERS : lsmash_codec_specific_data_type = 14 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_VIDEO_FIELD_INFO : lsmash_codec_specific_data_type = 15 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_VIDEO_PIXEL_FORMAT : lsmash_codec_specific_data_type = 16 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_VIDEO_SIGNIFICANT_BITS : lsmash_codec_specific_data_type = 17 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_VIDEO_GAMMA_LEVEL : lsmash_codec_specific_data_type = 18 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_QT_AUDIO_CHANNEL_LAYOUT : lsmash_codec_specific_data_type = 19 ; pub const lsmash_codec_specific_data_type_LSMASH_CODEC_SPECIFIC_DATA_TYPE_CODEC_GLOBAL_HEADER : lsmash_codec_specific_data_type = 20 ; pub type lsmash_codec_specific_data_type = i32 ; pub const lsmash_codec_specific_format_LSMASH_CODEC_SPECIFIC_FORMAT_UNSPECIFIED : lsmash_codec_specific_format = -1 ; pub const lsmash_codec_specific_format_LSMASH_CODEC_SPECIFIC_FORMAT_STRUCTURED : lsmash_codec_specific_format = 0 ; pub const lsmash_codec_specific_format_LSMASH_CODEC_SPECIFIC_FORMAT_UNSTRUCTURED : lsmash_codec_specific_format = 1 ; pub type lsmash_codec_specific_format = i32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union lsmash_codec_specific_data_t { pub always_null : * mut :: std :: os :: raw :: c_void , pub structured : * mut :: std :: os :: raw :: c_void , pub unstructured : * mut u8 , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_lsmash_codec_specific_data_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_codec_specific_data_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_codec_specific_data_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_codec_specific_data_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_codec_specific_data_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_data_t > ( ) ) ) . always_null as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_data_t ) , "::" , stringify ! ( always_null ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_data_t > ( ) ) ) . structured as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_data_t ) , "::" , stringify ! ( structured ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_data_t > ( ) ) ) . unstructured as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_data_t ) , "::" , stringify ! ( unstructured ) ) ) ; } pub type lsmash_codec_specific_destructor_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct lsmash_codec_specific_t { pub type_ : lsmash_codec_specific_data_type , pub format : lsmash_codec_specific_format , pub data : lsmash_codec_specific_data_t , pub size : u32 , pub destruct : lsmash_codec_specific_destructor_t , } # [ test ] fn bindgen_test_layout_lsmash_codec_specific_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_codec_specific_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( lsmash_codec_specific_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_codec_specific_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_codec_specific_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_t > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_t ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_t > ( ) ) ) . format as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_t ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_t > ( ) ) ) . data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_t ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_t > ( ) ) ) . size as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_t ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_specific_t > ( ) ) ) . destruct as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_specific_t ) , "::" , stringify ! ( destruct ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_codec_specific_list_tag { _unused : [ u8 ; 0 ] , } pub type lsmash_codec_specific_list_t = lsmash_codec_specific_list_tag ; pub const lsmash_codec_support_flag_LSMASH_CODEC_SUPPORT_FLAG_NONE : lsmash_codec_support_flag = 0 ; pub const lsmash_codec_support_flag_LSMASH_CODEC_SUPPORT_FLAG_MUX : lsmash_codec_support_flag = 1 ; pub const lsmash_codec_support_flag_LSMASH_CODEC_SUPPORT_FLAG_DEMUX : lsmash_codec_support_flag = 2 ; pub const lsmash_codec_support_flag_LSMASH_CODEC_SUPPORT_FLAG_REMUX : lsmash_codec_support_flag = 3 ; pub type lsmash_codec_support_flag = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_summary_t { pub summary_type : lsmash_summary_type , pub sample_type : lsmash_codec_type_t , pub opaque : * mut lsmash_codec_specific_list_t , pub max_au_length : u32 , pub data_ref_index : u32 , } # [ test ] fn bindgen_test_layout_lsmash_summary_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_summary_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( lsmash_summary_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_summary_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_summary_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_summary_t > ( ) ) ) . summary_type as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_summary_t ) , "::" , stringify ! ( summary_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_summary_t > ( ) ) ) . sample_type as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_summary_t ) , "::" , stringify ! ( sample_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_summary_t > ( ) ) ) . opaque as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_summary_t ) , "::" , stringify ! ( opaque ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_summary_t > ( ) ) ) . max_au_length as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_summary_t ) , "::" , stringify ! ( max_au_length ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_summary_t > ( ) ) ) . data_ref_index as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_summary_t ) , "::" , stringify ! ( data_ref_index ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_summary" ] pub fn lsmash_create_summary ( summary_type : lsmash_summary_type ) -> * mut lsmash_summary_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_cleanup_summary" ] pub fn lsmash_cleanup_summary ( summary : * mut lsmash_summary_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_add_sample_entry" ] pub fn lsmash_add_sample_entry ( root : * mut lsmash_root_t , track_ID : u32 , summary : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_count_summary" ] pub fn lsmash_count_summary ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_summary" ] pub fn lsmash_get_summary ( root : * mut lsmash_root_t , track_ID : u32 , description_number : u32 ) -> * mut lsmash_summary_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_codec_specific_data" ] pub fn lsmash_create_codec_specific_data ( type_ : lsmash_codec_specific_data_type , format : lsmash_codec_specific_format ) -> * mut lsmash_codec_specific_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_codec_specific_data" ] pub fn lsmash_destroy_codec_specific_data ( specific : * mut lsmash_codec_specific_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_add_codec_specific_data" ] pub fn lsmash_add_codec_specific_data ( summary : * mut lsmash_summary_t , specific : * mut lsmash_codec_specific_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_count_codec_specific_data" ] pub fn lsmash_count_codec_specific_data ( summary : * mut lsmash_summary_t ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_codec_specific_data" ] pub fn lsmash_get_codec_specific_data ( summary : * mut lsmash_summary_t , extension_number : u32 ) -> * mut lsmash_codec_specific_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_convert_codec_specific_format" ] pub fn lsmash_convert_codec_specific_format ( specific : * mut lsmash_codec_specific_t , format : lsmash_codec_specific_format ) -> * mut lsmash_codec_specific_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_compare_summary" ] pub fn lsmash_compare_summary ( a : * mut lsmash_summary_t , b : * mut lsmash_summary_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_codec_support" ] pub fn lsmash_check_codec_support ( codec_type : lsmash_codec_type_t ) -> lsmash_codec_support_flag ; } pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_NULL : lsmash_mp4a_AudioObjectType = 0 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_AAC_MAIN : lsmash_mp4a_AudioObjectType = 1 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_AAC_LC : lsmash_mp4a_AudioObjectType = 2 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_AAC_SSR : lsmash_mp4a_AudioObjectType = 3 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_AAC_LTP : lsmash_mp4a_AudioObjectType = 4 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SBR : lsmash_mp4a_AudioObjectType = 5 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_AAC_scalable : lsmash_mp4a_AudioObjectType = 6 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_TwinVQ : lsmash_mp4a_AudioObjectType = 7 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_CELP : lsmash_mp4a_AudioObjectType = 8 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_HVXC : lsmash_mp4a_AudioObjectType = 9 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_TTSI : lsmash_mp4a_AudioObjectType = 12 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_Main_synthetic : lsmash_mp4a_AudioObjectType = 13 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_Wavetable_synthesis : lsmash_mp4a_AudioObjectType = 14 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_General_MIDI : lsmash_mp4a_AudioObjectType = 15 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_Algorithmic_Synthesis_Audio_FX : lsmash_mp4a_AudioObjectType = 16 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_AAC_LC : lsmash_mp4a_AudioObjectType = 17 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_AAC_LTP : lsmash_mp4a_AudioObjectType = 19 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_AAC_scalable : lsmash_mp4a_AudioObjectType = 20 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_Twin_VQ : lsmash_mp4a_AudioObjectType = 21 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_BSAC : lsmash_mp4a_AudioObjectType = 22 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_AAC_LD : lsmash_mp4a_AudioObjectType = 23 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_CELP : lsmash_mp4a_AudioObjectType = 24 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_HVXC : lsmash_mp4a_AudioObjectType = 25 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_HILN : lsmash_mp4a_AudioObjectType = 26 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_Parametric : lsmash_mp4a_AudioObjectType = 27 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SSC : lsmash_mp4a_AudioObjectType = 28 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_PS : lsmash_mp4a_AudioObjectType = 29 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_MPEG_Surround : lsmash_mp4a_AudioObjectType = 30 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ESCAPE : lsmash_mp4a_AudioObjectType = 31 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_Layer_1 : lsmash_mp4a_AudioObjectType = 32 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_Layer_2 : lsmash_mp4a_AudioObjectType = 33 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_Layer_3 : lsmash_mp4a_AudioObjectType = 34 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_DST : lsmash_mp4a_AudioObjectType = 35 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ALS : lsmash_mp4a_AudioObjectType = 36 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SLS : lsmash_mp4a_AudioObjectType = 37 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SLS_non_core : lsmash_mp4a_AudioObjectType = 38 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_ER_AAC_ELD : lsmash_mp4a_AudioObjectType = 39 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SMR_Simple : lsmash_mp4a_AudioObjectType = 40 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SMR_Main : lsmash_mp4a_AudioObjectType = 41 ; pub const lsmash_mp4a_AudioObjectType_MP4A_AUDIO_OBJECT_TYPE_SAOC : lsmash_mp4a_AudioObjectType = 43 ; 
 /// Audio Description Layer 
 pub type lsmash_mp4a_AudioObjectType = u32 ; pub const lsmash_mp4a_aac_sbr_mode_MP4A_AAC_SBR_NOT_SPECIFIED : lsmash_mp4a_aac_sbr_mode = 0 ; pub const lsmash_mp4a_aac_sbr_mode_MP4A_AAC_SBR_NONE : lsmash_mp4a_aac_sbr_mode = 1 ; pub const lsmash_mp4a_aac_sbr_mode_MP4A_AAC_SBR_BACKWARD_COMPATIBLE : lsmash_mp4a_aac_sbr_mode = 2 ; pub const lsmash_mp4a_aac_sbr_mode_MP4A_AAC_SBR_HIERARCHICAL : lsmash_mp4a_aac_sbr_mode = 3 ; pub type lsmash_mp4a_aac_sbr_mode = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_audio_summary_t { pub summary_type : lsmash_summary_type , pub sample_type : lsmash_codec_type_t , pub opaque : * mut lsmash_codec_specific_list_t , pub max_au_length : u32 , pub data_ref_index : u32 , pub aot : lsmash_mp4a_AudioObjectType , pub frequency : u32 , pub channels : u32 , pub sample_size : u32 , pub samples_in_frame : u32 , pub sbr_mode : lsmash_mp4a_aac_sbr_mode , pub bytes_per_frame : u32 , } # [ test ] fn bindgen_test_layout_lsmash_audio_summary_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_audio_summary_t > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( lsmash_audio_summary_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_audio_summary_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_audio_summary_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . summary_type as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( summary_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . sample_type as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( sample_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . opaque as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( opaque ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . max_au_length as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( max_au_length ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . data_ref_index as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( data_ref_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . aot as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( aot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . frequency as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( frequency ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . channels as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( channels ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . sample_size as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( sample_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . samples_in_frame as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( samples_in_frame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . sbr_mode as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( sbr_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_audio_summary_t > ( ) ) ) . bytes_per_frame as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_audio_summary_t ) , "::" , stringify ! ( bytes_per_frame ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_AudioSpecificConfig" ] pub fn lsmash_setup_AudioSpecificConfig ( summary : * mut lsmash_audio_summary_t ) -> :: std :: os :: raw :: c_int ; } 
 /// Video Description Layer 
 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_clap_t { pub width : lsmash_rational_u32_t , pub height : lsmash_rational_u32_t , pub horizontal_offset : lsmash_rational_s32_t , pub vertical_offset : lsmash_rational_s32_t , } # [ test ] fn bindgen_test_layout_lsmash_clap_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_clap_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( lsmash_clap_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_clap_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_clap_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_clap_t > ( ) ) ) . width as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_clap_t ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_clap_t > ( ) ) ) . height as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_clap_t ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_clap_t > ( ) ) ) . horizontal_offset as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_clap_t ) , "::" , stringify ! ( horizontal_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_clap_t > ( ) ) ) . vertical_offset as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_clap_t ) , "::" , stringify ! ( vertical_offset ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_crop_t { pub top : lsmash_rational_u32_t , pub left : lsmash_rational_u32_t , pub bottom : lsmash_rational_u32_t , pub right : lsmash_rational_u32_t , } # [ test ] fn bindgen_test_layout_lsmash_crop_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_crop_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( lsmash_crop_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_crop_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_crop_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_crop_t > ( ) ) ) . top as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_crop_t ) , "::" , stringify ! ( top ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_crop_t > ( ) ) ) . left as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_crop_t ) , "::" , stringify ! ( left ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_crop_t > ( ) ) ) . bottom as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_crop_t ) , "::" , stringify ! ( bottom ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_crop_t > ( ) ) ) . right as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_crop_t ) , "::" , stringify ! ( right ) ) ) ; } pub const lsmash_video_depth_ISOM_DEPTH_TEMPLATE : lsmash_video_depth = 24 ; pub const lsmash_video_depth_AVC_DEPTH_COLOR_WITH_NO_ALPHA : lsmash_video_depth = 24 ; pub const lsmash_video_depth_AVC_DEPTH_GRAYSCALE_WITH_NO_ALPHA : lsmash_video_depth = 40 ; pub const lsmash_video_depth_AVC_DEPTH_WITH_ALPHA : lsmash_video_depth = 32 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_1 : lsmash_video_depth = 1 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_2 : lsmash_video_depth = 2 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_4 : lsmash_video_depth = 4 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_8 : lsmash_video_depth = 8 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_16 : lsmash_video_depth = 16 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_24 : lsmash_video_depth = 24 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_COLOR_32 : lsmash_video_depth = 32 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_GRAYSCALE_1 : lsmash_video_depth = 33 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_GRAYSCALE_2 : lsmash_video_depth = 34 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_GRAYSCALE_4 : lsmash_video_depth = 36 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_GRAYSCALE_8 : lsmash_video_depth = 40 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_555RGB : lsmash_video_depth = 16 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_24RGB : lsmash_video_depth = 24 ; pub const lsmash_video_depth_QT_VIDEO_DEPTH_32ARGB : lsmash_video_depth = 32 ; pub type lsmash_video_depth = u32 ; pub const ISOM_PRIMARIES_INDEX_ITU_R709_5 : _bindgen_ty_2 = 1 ; pub const ISOM_PRIMARIES_INDEX_UNSPECIFIED : _bindgen_ty_2 = 2 ; pub const ISOM_PRIMARIES_INDEX_ITU_R470M : _bindgen_ty_2 = 4 ; pub const ISOM_PRIMARIES_INDEX_ITU_R470BG : _bindgen_ty_2 = 5 ; pub const ISOM_PRIMARIES_INDEX_SMPTE_170M_2004 : _bindgen_ty_2 = 6 ; pub const ISOM_PRIMARIES_INDEX_SMPTE_240M_1999 : _bindgen_ty_2 = 7 ; pub const QT_PRIMARIES_INDEX_ITU_R709_2 : _bindgen_ty_2 = 1 ; pub const QT_PRIMARIES_INDEX_UNSPECIFIED : _bindgen_ty_2 = 2 ; pub const QT_PRIMARIES_INDEX_EBU_3213 : _bindgen_ty_2 = 5 ; pub const QT_PRIMARIES_INDEX_SMPTE_C : _bindgen_ty_2 = 6 ; pub type _bindgen_ty_2 = u32 ; pub const ISOM_TRANSFER_INDEX_ITU_R709_5 : _bindgen_ty_3 = 1 ; pub const ISOM_TRANSFER_INDEX_UNSPECIFIED : _bindgen_ty_3 = 2 ; pub const ISOM_TRANSFER_INDEX_ITU_R470M : _bindgen_ty_3 = 4 ; pub const ISOM_TRANSFER_INDEX_ITU_R470BG : _bindgen_ty_3 = 5 ; pub const ISOM_TRANSFER_INDEX_SMPTE_170M_2004 : _bindgen_ty_3 = 6 ; pub const ISOM_TRANSFER_INDEX_SMPTE_240M_1999 : _bindgen_ty_3 = 7 ; pub const ISOM_TRANSFER_INDEX_LINEAR : _bindgen_ty_3 = 8 ; pub const ISOM_TRANSFER_INDEX_XVYCC : _bindgen_ty_3 = 11 ; pub const ISOM_TRANSFER_INDEX_ITU_R1361 : _bindgen_ty_3 = 12 ; pub const ISOM_TRANSFER_INDEX_SRGB : _bindgen_ty_3 = 13 ; pub const QT_TRANSFER_INDEX_ITU_R709_2 : _bindgen_ty_3 = 1 ; pub const QT_TRANSFER_INDEX_UNSPECIFIED : _bindgen_ty_3 = 2 ; pub const QT_TRANSFER_INDEX_SMPTE_240M_1995 : _bindgen_ty_3 = 7 ; pub type _bindgen_ty_3 = u32 ; pub const ISOM_MATRIX_INDEX_NO_MATRIX : _bindgen_ty_4 = 0 ; pub const ISOM_MATRIX_INDEX_ITU_R_709_5 : _bindgen_ty_4 = 1 ; pub const ISOM_MATRIX_INDEX_UNSPECIFIED : _bindgen_ty_4 = 2 ; pub const ISOM_MATRIX_INDEX_USFCCT_47_CFR : _bindgen_ty_4 = 4 ; pub const ISOM_MATRIX_INDEX_ITU_R470BG : _bindgen_ty_4 = 5 ; pub const ISOM_MATRIX_INDEX_SMPTE_170M_2004 : _bindgen_ty_4 = 6 ; pub const ISOM_MATRIX_INDEX_SMPTE_240M_1999 : _bindgen_ty_4 = 7 ; pub const ISOM_MATRIX_INDEX_YCGCO : _bindgen_ty_4 = 8 ; pub const QT_MATRIX_INDEX_ITU_R_709_2 : _bindgen_ty_4 = 1 ; pub const QT_MATRIX_INDEX_UNSPECIFIED : _bindgen_ty_4 = 2 ; pub const QT_MATRIX_INDEX_ITU_R_601_4 : _bindgen_ty_4 = 6 ; pub const QT_MATRIX_INDEX_SMPTE_240M_1995 : _bindgen_ty_4 = 7 ; pub type _bindgen_ty_4 = u32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct lsmash_video_summary_t { pub summary_type : lsmash_summary_type , pub sample_type : lsmash_codec_type_t , pub opaque : * mut lsmash_codec_specific_list_t , pub max_au_length : u32 , pub data_ref_index : u32 , pub timescale : u32 , pub timebase : u32 , pub vfr : u8 , pub sample_per_field : u8 , pub width : u32 , pub height : u32 , pub compressorname : [ :: std :: os :: raw :: c_char ; 33usize ] , pub depth : lsmash_video_depth , pub clap : lsmash_clap_t , pub par_h : u32 , pub par_v : u32 , pub color : lsmash_video_summary_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_video_summary_t__bindgen_ty_1 { pub primaries_index : u16 , pub transfer_index : u16 , pub matrix_index : u16 , pub full_range : u8 , } # [ test ] fn bindgen_test_layout_lsmash_video_summary_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_video_summary_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_video_summary_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_video_summary_t__bindgen_ty_1 > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( lsmash_video_summary_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t__bindgen_ty_1 > ( ) ) ) . primaries_index as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t__bindgen_ty_1 ) , "::" , stringify ! ( primaries_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t__bindgen_ty_1 > ( ) ) ) . transfer_index as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t__bindgen_ty_1 ) , "::" , stringify ! ( transfer_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t__bindgen_ty_1 > ( ) ) ) . matrix_index as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t__bindgen_ty_1 ) , "::" , stringify ! ( matrix_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t__bindgen_ty_1 > ( ) ) ) . full_range as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t__bindgen_ty_1 ) , "::" , stringify ! ( full_range ) ) ) ; } # [ test ] fn bindgen_test_layout_lsmash_video_summary_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_video_summary_t > ( ) , 152usize , concat ! ( "Size of: " , stringify ! ( lsmash_video_summary_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_video_summary_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_video_summary_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . summary_type as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( summary_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . sample_type as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( sample_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . opaque as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( opaque ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . max_au_length as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( max_au_length ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . data_ref_index as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( data_ref_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . timescale as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( timescale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . timebase as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( timebase ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . vfr as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( vfr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . sample_per_field as * const _ as usize } , 49usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( sample_per_field ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . width as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . height as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . compressorname as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( compressorname ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . depth as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . clap as * const _ as usize } , 100usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( clap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . par_h as * const _ as usize } , 132usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( par_h ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . par_v as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( par_v ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_video_summary_t > ( ) ) ) . color as * const _ as usize } , 140usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_video_summary_t ) , "::" , stringify ! ( color ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_convert_crop_into_clap" ] pub fn lsmash_convert_crop_into_clap ( crop : lsmash_crop_t , width : u32 , height : u32 , clap : * mut lsmash_clap_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_convert_clap_into_crop" ] pub fn lsmash_convert_clap_into_crop ( clap : lsmash_clap_t , width : u32 , height : u32 , crop : * mut lsmash_crop_t ) -> :: std :: os :: raw :: c_int ; } pub const lsmash_sample_dependency_QT_SAMPLE_EARLIER_PTS_ALLOWED : lsmash_sample_dependency = 1 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_LEADING_UNKNOWN : lsmash_sample_dependency = 0 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_UNDECODABLE_LEADING : lsmash_sample_dependency = 1 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_NOT_LEADING : lsmash_sample_dependency = 2 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_DECODABLE_LEADING : lsmash_sample_dependency = 3 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_INDEPENDENCY_UNKNOWN : lsmash_sample_dependency = 0 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_NOT_INDEPENDENT : lsmash_sample_dependency = 1 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_INDEPENDENT : lsmash_sample_dependency = 2 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_DISPOSABLE_UNKNOWN : lsmash_sample_dependency = 0 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_NOT_DISPOSABLE : lsmash_sample_dependency = 1 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_IS_DISPOSABLE : lsmash_sample_dependency = 2 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_REDUNDANCY_UNKNOWN : lsmash_sample_dependency = 0 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_HAS_REDUNDANCY : lsmash_sample_dependency = 1 ; pub const lsmash_sample_dependency_ISOM_SAMPLE_HAS_NO_REDUNDANCY : lsmash_sample_dependency = 2 ; 
 /// Media Sample 
 pub type lsmash_sample_dependency = u32 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_NONE : lsmash_random_access_flag = 0 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_SYNC : lsmash_random_access_flag = 1 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_RAP : lsmash_random_access_flag = 4 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_CLOSED : lsmash_random_access_flag = 8 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_OPEN : lsmash_random_access_flag = 16 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_GDR : lsmash_random_access_flag = 32 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_GDR_START : lsmash_random_access_flag = 64 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_GDR_END : lsmash_random_access_flag = 128 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_CLOSED_RAP : lsmash_random_access_flag = 12 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_OPEN_RAP : lsmash_random_access_flag = 20 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_POST_ROLL_START : lsmash_random_access_flag = 96 ; pub const lsmash_random_access_flag_ISOM_SAMPLE_RANDOM_ACCESS_FLAG_PRE_ROLL_END : lsmash_random_access_flag = 160 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_NONE : lsmash_random_access_flag = 0 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_SYNC : lsmash_random_access_flag = 1 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_PARTIAL_SYNC : lsmash_random_access_flag = 2 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_RAP : lsmash_random_access_flag = 4 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_CLOSED : lsmash_random_access_flag = 8 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_OPEN : lsmash_random_access_flag = 16 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_CLOSED_RAP : lsmash_random_access_flag = 12 ; pub const lsmash_random_access_flag_QT_SAMPLE_RANDOM_ACCESS_FLAG_OPEN_RAP : lsmash_random_access_flag = 20 ; pub type lsmash_random_access_flag = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_post_roll_t { pub identifier : u32 , pub complete : u32 , } # [ test ] fn bindgen_test_layout_lsmash_post_roll_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_post_roll_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_post_roll_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_post_roll_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_post_roll_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_post_roll_t > ( ) ) ) . identifier as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_post_roll_t ) , "::" , stringify ! ( identifier ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_post_roll_t > ( ) ) ) . complete as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_post_roll_t ) , "::" , stringify ! ( complete ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_pre_roll_t { pub distance : u32 , } # [ test ] fn bindgen_test_layout_lsmash_pre_roll_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_pre_roll_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( lsmash_pre_roll_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_pre_roll_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_pre_roll_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_pre_roll_t > ( ) ) ) . distance as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_pre_roll_t ) , "::" , stringify ! ( distance ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_sample_property_t { pub ra_flags : lsmash_random_access_flag , pub post_roll : lsmash_post_roll_t , pub pre_roll : lsmash_pre_roll_t , pub allow_earlier : u8 , pub leading : u8 , pub independent : u8 , pub disposable : u8 , pub redundant : u8 , pub reserved : [ u8 ; 3usize ] , } # [ test ] fn bindgen_test_layout_lsmash_sample_property_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_sample_property_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( lsmash_sample_property_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_sample_property_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_sample_property_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . ra_flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( ra_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . post_roll as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( post_roll ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . pre_roll as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( pre_roll ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . allow_earlier as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( allow_earlier ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . leading as * const _ as usize } , 17usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( leading ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . independent as * const _ as usize } , 18usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( independent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . disposable as * const _ as usize } , 19usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( disposable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . redundant as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( redundant ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_property_t > ( ) ) ) . reserved as * const _ as usize } , 21usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_property_t ) , "::" , stringify ! ( reserved ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_sample_t { pub length : u32 , pub data : * mut u8 , pub dts : u64 , pub cts : u64 , pub pos : u64 , pub index : u32 , pub prop : lsmash_sample_property_t , } # [ test ] fn bindgen_test_layout_lsmash_sample_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_sample_t > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( lsmash_sample_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_sample_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_sample_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . length as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . dts as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( dts ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . cts as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( cts ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . pos as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . index as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_sample_t > ( ) ) ) . prop as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_sample_t ) , "::" , stringify ! ( prop ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_media_ts_t { pub dts : u64 , pub cts : u64 , } # [ test ] fn bindgen_test_layout_lsmash_media_ts_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_media_ts_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_media_ts_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_media_ts_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_media_ts_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_ts_t > ( ) ) ) . dts as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_ts_t ) , "::" , stringify ! ( dts ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_ts_t > ( ) ) ) . cts as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_ts_t ) , "::" , stringify ! ( cts ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_media_ts_list_t { pub sample_count : u32 , pub timestamp : * mut lsmash_media_ts_t , } # [ test ] fn bindgen_test_layout_lsmash_media_ts_list_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_media_ts_list_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_media_ts_list_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_media_ts_list_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_media_ts_list_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_ts_list_t > ( ) ) ) . sample_count as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_ts_list_t ) , "::" , stringify ! ( sample_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_ts_list_t > ( ) ) ) . timestamp as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_ts_list_t ) , "::" , stringify ! ( timestamp ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_sample" ] pub fn lsmash_create_sample ( size : u32 ) -> * mut lsmash_sample_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_sample_alloc" ] pub fn lsmash_sample_alloc ( sample : * mut lsmash_sample_t , size : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_delete_sample" ] pub fn lsmash_delete_sample ( sample : * mut lsmash_sample_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_append_sample" ] pub fn lsmash_append_sample ( root : * mut lsmash_root_t , track_ID : u32 , sample : * mut lsmash_sample_t ) -> :: std :: os :: raw :: c_int ; } pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_3GPP_SCENE_DESCRIPTION : lsmash_media_type = 862417764 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_ID3_VERSION2_METADATA : lsmash_media_type = 1229206322 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_AUXILIARY_VIDEO_TRACK : lsmash_media_type = 1635088502 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_CPCM_AUXILIARY_METADATA : lsmash_media_type = 1668309348 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_CLOCK_REFERENCE_STREAM : lsmash_media_type = 1668445037 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_DVB_MANDATORY_BASIC_DESCRIPTION : lsmash_media_type = 1684890212 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_TV_ANYTIME : lsmash_media_type = 1685354081 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_BROADBAND_CONTENT_GUIDE : lsmash_media_type = 1685354081 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_FONT_DATA_STREAM : lsmash_media_type = 1717859181 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_GENERAL_MPEG4_SYSTEM_STREAM : lsmash_media_type = 1734701933 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_HINT_TRACK : lsmash_media_type = 1751740020 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_IPDC_ELECTRONIC_SERVICE_GUIDE : lsmash_media_type = 1768973411 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_IPMP_STREAM : lsmash_media_type = 1768977261 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_MPEG7_STREAM : lsmash_media_type = 1832350573 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_TIMED_METADATA_TRACK : lsmash_media_type = 1835365473 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_MPEGJ_STREAM : lsmash_media_type = 1835692909 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_MPEG21_DIGITAL_ITEM : lsmash_media_type = 1836069425 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_OBJECT_CONTENT_INFO_STREAM : lsmash_media_type = 1868788589 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_OBJECT_DESCRIPTOR_STREAM : lsmash_media_type = 1868854125 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_SCENE_DESCRIPTION_STREAM : lsmash_media_type = 1935962989 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_KEY_MANAGEMENT_MESSAGES : lsmash_media_type = 1936420205 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_AUDIO_TRACK : lsmash_media_type = 1936684398 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_TEXT_TRACK : lsmash_media_type = 1952807028 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_PROPRIETARY_DESCRIPTIVE_METADATA : lsmash_media_type = 1970432288 ; pub const lsmash_media_type_ISOM_MEDIA_HANDLER_TYPE_VIDEO_TRACK : lsmash_media_type = 1986618469 ; 
 /// Media Layer 
 pub type lsmash_media_type = u32 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ENGLISH : lsmash_iso_language_code = 5575 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_FRENCH : lsmash_iso_language_code = 6721 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_GERMAN : lsmash_iso_language_code = 4277 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ITALIAN : lsmash_iso_language_code = 9857 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_DUTCH_M : lsmash_iso_language_code = 4781 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SWEDISH : lsmash_iso_language_code = 20197 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SPANISH : lsmash_iso_language_code = 19969 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_DANISH : lsmash_iso_language_code = 4142 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_PORTUGUESE : lsmash_iso_language_code = 16882 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_NORWEGIAN : lsmash_iso_language_code = 14834 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_HEBREW : lsmash_iso_language_code = 8354 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_JAPANESE : lsmash_iso_language_code = 10766 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ARABIC : lsmash_iso_language_code = 1601 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_FINNISH : lsmash_iso_language_code = 6446 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_GREEK : lsmash_iso_language_code = 5516 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ICELANDIC : lsmash_iso_language_code = 9836 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MALTESE : lsmash_iso_language_code = 13716 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TURKISH : lsmash_iso_language_code = 21170 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_CROATIAN : lsmash_iso_language_code = 8790 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_CHINESE : lsmash_iso_language_code = 26895 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_URDU : lsmash_iso_language_code = 22084 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_HINDI : lsmash_iso_language_code = 8494 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_THAI : lsmash_iso_language_code = 20737 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KOREAN : lsmash_iso_language_code = 11762 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_LITHUANIAN : lsmash_iso_language_code = 12596 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_POLISH : lsmash_iso_language_code = 16876 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_HUNGARIAN : lsmash_iso_language_code = 8878 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ESTONIAN : lsmash_iso_language_code = 5748 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_LATVIAN : lsmash_iso_language_code = 12342 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SAMI : lsmash_iso_language_code = 19881 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_FAROESE : lsmash_iso_language_code = 6191 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_RUSSIAN : lsmash_iso_language_code = 19123 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_DUTCH : lsmash_iso_language_code = 14724 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_IRISH : lsmash_iso_language_code = 7557 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ALBANIAN : lsmash_iso_language_code = 20009 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ROMANIAN : lsmash_iso_language_code = 18926 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_CZECH : lsmash_iso_language_code = 3251 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SLOVAK : lsmash_iso_language_code = 19851 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SLOVENIA : lsmash_iso_language_code = 19862 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_YIDDISH : lsmash_iso_language_code = 25892 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SERBIAN : lsmash_iso_language_code = 20048 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MACEDONIAN : lsmash_iso_language_code = 13668 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_BULGARIAN : lsmash_iso_language_code = 2732 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_UKRAINIAN : lsmash_iso_language_code = 21874 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_BELARUSIAN : lsmash_iso_language_code = 2220 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_UZBEK : lsmash_iso_language_code = 22338 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KAZAKH : lsmash_iso_language_code = 11322 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_AZERBAIJANI : lsmash_iso_language_code = 1861 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ARMENIAN : lsmash_iso_language_code = 8997 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_GEORGIAN : lsmash_iso_language_code = 11316 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MOLDAVIAN : lsmash_iso_language_code = 18926 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KIRGHIZ : lsmash_iso_language_code = 11570 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TAJIK : lsmash_iso_language_code = 20715 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TURKMEN : lsmash_iso_language_code = 21163 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MONGOLIAN : lsmash_iso_language_code = 13806 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_PASHTO : lsmash_iso_language_code = 17075 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KURDISH : lsmash_iso_language_code = 11954 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KASHMIRI : lsmash_iso_language_code = 11315 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SINDHI : lsmash_iso_language_code = 19908 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TIBETAN : lsmash_iso_language_code = 2532 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_NEPALI : lsmash_iso_language_code = 14512 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SANSKRIT : lsmash_iso_language_code = 19502 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MARATHI : lsmash_iso_language_code = 13362 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_BENGALI : lsmash_iso_language_code = 2222 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ASSAMESE : lsmash_iso_language_code = 1645 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_GUJARATI : lsmash_iso_language_code = 7850 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_PUNJABI : lsmash_iso_language_code = 16430 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ORIYA : lsmash_iso_language_code = 15945 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MALAYALAM : lsmash_iso_language_code = 13356 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KANNADA : lsmash_iso_language_code = 11310 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TAMIL : lsmash_iso_language_code = 20525 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TELUGU : lsmash_iso_language_code = 20652 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SINHALESE : lsmash_iso_language_code = 19758 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_BURMESE : lsmash_iso_language_code = 14113 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KHMER : lsmash_iso_language_code = 11533 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_LAO : lsmash_iso_language_code = 12335 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_VIETNAMESE : lsmash_iso_language_code = 22821 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_INDONESIAN : lsmash_iso_language_code = 9668 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TAGALOG : lsmash_iso_language_code = 20716 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MALAY_ROMAN : lsmash_iso_language_code = 13921 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MAYAY_ARABIC : lsmash_iso_language_code = 13921 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_AMHARIC : lsmash_iso_language_code = 1448 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_OROMO : lsmash_iso_language_code = 15949 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SOMALI : lsmash_iso_language_code = 19949 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_SWAHILI : lsmash_iso_language_code = 20193 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_KINYARWANDA : lsmash_iso_language_code = 11566 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_RUNDI : lsmash_iso_language_code = 19118 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_CHEWA : lsmash_iso_language_code = 15137 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_MALAGASY : lsmash_iso_language_code = 13703 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_ESPERANTO : lsmash_iso_language_code = 5647 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_WELSH : lsmash_iso_language_code = 3885 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_BASQUE : lsmash_iso_language_code = 5811 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_CATALAN : lsmash_iso_language_code = 3124 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_LATIN : lsmash_iso_language_code = 12340 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_QUECHUA : lsmash_iso_language_code = 18085 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_GUARANI : lsmash_iso_language_code = 7758 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_AYMARA : lsmash_iso_language_code = 1837 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_TATAR : lsmash_iso_language_code = 3656 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_UIGHUR : lsmash_iso_language_code = 21799 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_DZONGKHA : lsmash_iso_language_code = 4943 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_JAVANESE : lsmash_iso_language_code = 10294 ; pub const lsmash_iso_language_code_ISOM_LANGUAGE_CODE_UNDEFINED : lsmash_iso_language_code = 21956 ; pub type lsmash_iso_language_code = u32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct lsmash_media_parameters_t { pub handler_type : lsmash_media_type , pub timescale : u32 , pub duration : u64 , pub roll_grouping : u8 , pub rap_grouping : u8 , pub MAC_language : u16 , pub ISO_language : u16 , pub media_handler_name : * mut :: std :: os :: raw :: c_char , pub data_handler_name : * mut :: std :: os :: raw :: c_char , pub media_handler_name_shadow : [ :: std :: os :: raw :: c_char ; 256usize ] , pub data_handler_name_shadow : [ :: std :: os :: raw :: c_char ; 256usize ] , pub compact_sample_size_table : u8 , pub no_sample_dependency_table : u8 , pub reserved : [ u8 ; 2usize ] , } # [ test ] fn bindgen_test_layout_lsmash_media_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_media_parameters_t > ( ) , 560usize , concat ! ( "Size of: " , stringify ! ( lsmash_media_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_media_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_media_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . handler_type as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( handler_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . timescale as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( timescale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . duration as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . roll_grouping as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( roll_grouping ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . rap_grouping as * const _ as usize } , 17usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( rap_grouping ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . MAC_language as * const _ as usize } , 18usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( MAC_language ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . ISO_language as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( ISO_language ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . media_handler_name as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( media_handler_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . data_handler_name as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( data_handler_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . media_handler_name_shadow as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( media_handler_name_shadow ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . data_handler_name_shadow as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( data_handler_name_shadow ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . compact_sample_size_table as * const _ as usize } , 552usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( compact_sample_size_table ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . no_sample_dependency_table as * const _ as usize } , 553usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( no_sample_dependency_table ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_media_parameters_t > ( ) ) ) . reserved as * const _ as usize } , 554usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_media_parameters_t ) , "::" , stringify ! ( reserved ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_data_reference_t { pub index : u32 , pub location : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_lsmash_data_reference_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_data_reference_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_data_reference_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_data_reference_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_data_reference_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_data_reference_t > ( ) ) ) . index as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_data_reference_t ) , "::" , stringify ! ( index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_data_reference_t > ( ) ) ) . location as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_data_reference_t ) , "::" , stringify ! ( location ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_initialize_media_parameters" ] pub fn lsmash_initialize_media_parameters ( param : * mut lsmash_media_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_media_parameters" ] pub fn lsmash_set_media_parameters ( root : * mut lsmash_root_t , track_ID : u32 , param : * mut lsmash_media_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_last_sample_delta" ] pub fn lsmash_set_last_sample_delta ( root : * mut lsmash_root_t , track_ID : u32 , sample_delta : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_flush_pooled_samples" ] pub fn lsmash_flush_pooled_samples ( root : * mut lsmash_root_t , track_ID : u32 , last_sample_delta : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_update_media_modification_time" ] pub fn lsmash_update_media_modification_time ( root : * mut lsmash_root_t , track_ID : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_media_parameters" ] pub fn lsmash_get_media_parameters ( root : * mut lsmash_root_t , track_ID : u32 , param : * mut lsmash_media_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_media_duration" ] pub fn lsmash_get_media_duration ( root : * mut lsmash_root_t , track_ID : u32 ) -> u64 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_media_timescale" ] pub fn lsmash_get_media_timescale ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_last_sample_delta" ] pub fn lsmash_get_last_sample_delta ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_start_time_offset" ] pub fn lsmash_get_start_time_offset ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_composition_to_decode_shift" ] pub fn lsmash_get_composition_to_decode_shift ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_pack_iso_language" ] pub fn lsmash_pack_iso_language ( iso_language : * mut :: std :: os :: raw :: c_char ) -> u16 ; } extern "C" { # [ link_name = "\u{1}_lsmash_count_data_reference" ] pub fn lsmash_count_data_reference ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_data_reference" ] pub fn lsmash_get_data_reference ( root : * mut lsmash_root_t , track_ID : u32 , data_ref : * mut lsmash_data_reference_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_cleanup_data_reference" ] pub fn lsmash_cleanup_data_reference ( data_ref : * mut lsmash_data_reference_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_data_reference" ] pub fn lsmash_create_data_reference ( root : * mut lsmash_root_t , track_ID : u32 , data_ref : * mut lsmash_data_reference_t , file : * mut lsmash_file_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_assign_data_reference" ] pub fn lsmash_assign_data_reference ( root : * mut lsmash_root_t , track_ID : u32 , data_ref_index : u32 , file : * mut lsmash_file_t ) -> :: std :: os :: raw :: c_int ; } pub const lsmash_track_mode_ISOM_TRACK_ENABLED : lsmash_track_mode = 1 ; pub const lsmash_track_mode_ISOM_TRACK_IN_MOVIE : lsmash_track_mode = 2 ; pub const lsmash_track_mode_ISOM_TRACK_IN_PREVIEW : lsmash_track_mode = 4 ; pub const lsmash_track_mode_QT_TRACK_IN_POSTER : lsmash_track_mode = 8 ; 
 /// Track Layer 
 pub type lsmash_track_mode = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_track_parameters_t { pub mode : lsmash_track_mode , pub track_ID : u32 , pub duration : u64 , pub alternate_group : i16 , pub video_layer : i16 , pub audio_volume : i16 , pub matrix : [ i32 ; 9usize ] , pub display_width : u32 , pub display_height : u32 , pub aperture_modes : u8 , } # [ test ] fn bindgen_test_layout_lsmash_track_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_track_parameters_t > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( lsmash_track_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_track_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_track_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . mode as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . track_ID as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( track_ID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . duration as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . alternate_group as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( alternate_group ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . video_layer as * const _ as usize } , 18usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( video_layer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . audio_volume as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( audio_volume ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . matrix as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( matrix ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . display_width as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( display_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . display_height as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( display_height ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_track_parameters_t > ( ) ) ) . aperture_modes as * const _ as usize } , 68usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_track_parameters_t ) , "::" , stringify ! ( aperture_modes ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_edit_t { pub duration : u64 , pub start_time : i64 , pub rate : i32 , } # [ test ] fn bindgen_test_layout_lsmash_edit_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_edit_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( lsmash_edit_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_edit_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_edit_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_edit_t > ( ) ) ) . duration as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_edit_t ) , "::" , stringify ! ( duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_edit_t > ( ) ) ) . start_time as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_edit_t ) , "::" , stringify ! ( start_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_edit_t > ( ) ) ) . rate as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_edit_t ) , "::" , stringify ! ( rate ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_track" ] pub fn lsmash_create_track ( root : * mut lsmash_root_t , media_type : lsmash_media_type ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_delete_track" ] pub fn lsmash_delete_track ( root : * mut lsmash_root_t , track_ID : u32 ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_initialize_track_parameters" ] pub fn lsmash_initialize_track_parameters ( param : * mut lsmash_track_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_track_parameters" ] pub fn lsmash_set_track_parameters ( root : * mut lsmash_root_t , track_ID : u32 , param : * mut lsmash_track_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_update_track_duration" ] pub fn lsmash_update_track_duration ( root : * mut lsmash_root_t , track_ID : u32 , last_sample_delta : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_update_track_modification_time" ] pub fn lsmash_update_track_modification_time ( root : * mut lsmash_root_t , track_ID : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_track_ID" ] pub fn lsmash_get_track_ID ( root : * mut lsmash_root_t , track_number : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_track_parameters" ] pub fn lsmash_get_track_parameters ( root : * mut lsmash_root_t , track_ID : u32 , param : * mut lsmash_track_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_track_duration" ] pub fn lsmash_get_track_duration ( root : * mut lsmash_root_t , track_ID : u32 ) -> u64 ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_explicit_timeline_map" ] pub fn lsmash_create_explicit_timeline_map ( root : * mut lsmash_root_t , track_ID : u32 , edit : lsmash_edit_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_delete_explicit_timeline_map" ] pub fn lsmash_delete_explicit_timeline_map ( root : * mut lsmash_root_t , track_ID : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_count_explicit_timeline_map" ] pub fn lsmash_count_explicit_timeline_map ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_explicit_timeline_map" ] pub fn lsmash_get_explicit_timeline_map ( root : * mut lsmash_root_t , track_ID : u32 , edit_number : u32 , edit : * mut lsmash_edit_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_modify_explicit_timeline_map" ] pub fn lsmash_modify_explicit_timeline_map ( root : * mut lsmash_root_t , track_ID : u32 , edit_number : u32 , edit : lsmash_edit_t ) -> :: std :: os :: raw :: c_int ; } 
 /// Movie Layer 
 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_movie_parameters_t { pub timescale : u32 , pub duration : u64 , pub number_of_tracks : u32 , pub playback_rate : i32 , pub playback_volume : i32 , pub preview_time : i32 , pub preview_duration : i32 , pub poster_time : i32 , } # [ test ] fn bindgen_test_layout_lsmash_movie_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_movie_parameters_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( lsmash_movie_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_movie_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_movie_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . timescale as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( timescale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . duration as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . number_of_tracks as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( number_of_tracks ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . playback_rate as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( playback_rate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . playback_volume as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( playback_volume ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . preview_time as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( preview_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . preview_duration as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( preview_duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_movie_parameters_t > ( ) ) ) . poster_time as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_movie_parameters_t ) , "::" , stringify ! ( poster_time ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_initialize_movie_parameters" ] pub fn lsmash_initialize_movie_parameters ( param : * mut lsmash_movie_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_movie_parameters" ] pub fn lsmash_set_movie_parameters ( root : * mut lsmash_root_t , param : * mut lsmash_movie_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_finish_movie" ] pub fn lsmash_finish_movie ( root : * mut lsmash_root_t , remux : * mut lsmash_adhoc_remux_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_update_movie_modification_time" ] pub fn lsmash_update_movie_modification_time ( root : * mut lsmash_root_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_movie_parameters" ] pub fn lsmash_get_movie_parameters ( root : * mut lsmash_root_t , param : * mut lsmash_movie_parameters_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_movie_timescale" ] pub fn lsmash_get_movie_timescale ( root : * mut lsmash_root_t ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_reserve_media_data_size" ] pub fn lsmash_reserve_media_data_size ( root : * mut lsmash_root_t , media_data_size : u64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 /// Chapter list 
 # [ link_name = "\u{1}_lsmash_create_reference_chapter_track" ] pub fn lsmash_create_reference_chapter_track ( root : * mut lsmash_root_t , track_ID : u32 , file_name : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_tyrant_chapter" ] pub fn lsmash_set_tyrant_chapter ( root : * mut lsmash_root_t , file_name : * mut :: std :: os :: raw :: c_char , add_bom : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_delete_tyrant_chapter" ] pub fn lsmash_delete_tyrant_chapter ( root : * mut lsmash_root_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_count_tyrant_chapter" ] pub fn lsmash_count_tyrant_chapter ( root : * mut lsmash_root_t ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_tyrant_chapter" ] pub fn lsmash_get_tyrant_chapter ( root : * mut lsmash_root_t , index : u32 , timestamp : * mut f64 ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { 
 /// Fragments 
 # [ link_name = "\u{1}_lsmash_create_fragment_movie" ] pub fn lsmash_create_fragment_movie ( root : * mut lsmash_root_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_fragment_empty_duration" ] pub fn lsmash_create_fragment_empty_duration ( root : * mut lsmash_root_t , track_ID : u32 , duration : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 /// Dump / Print 
 # [ link_name = "\u{1}_lsmash_print_movie" ] pub fn lsmash_print_movie ( root : * mut lsmash_root_t , filename : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_print_chapter_list" ] pub fn lsmash_print_chapter_list ( root : * mut lsmash_root_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 /// Timeline 
 # [ link_name = "\u{1}_lsmash_copy_timeline_map" ] pub fn lsmash_copy_timeline_map ( dst : * mut lsmash_root_t , dst_track_ID : u32 , src : * mut lsmash_root_t , src_track_ID : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_construct_timeline" ] pub fn lsmash_construct_timeline ( root : * mut lsmash_root_t , track_ID : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_destruct_timeline" ] pub fn lsmash_destruct_timeline ( root : * mut lsmash_root_t , track_ID : u32 ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_last_sample_delta_from_media_timeline" ] pub fn lsmash_get_last_sample_delta_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , last_sample_delta : * mut u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_sample_delta_from_media_timeline" ] pub fn lsmash_get_sample_delta_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , sample_delta : * mut u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_dts_from_media_timeline" ] pub fn lsmash_get_dts_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , dts : * mut u64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_cts_from_media_timeline" ] pub fn lsmash_get_cts_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , cts : * mut u64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_composition_to_decode_shift_from_media_timeline" ] pub fn lsmash_get_composition_to_decode_shift_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , ctd_shift : * mut u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_closest_random_accessible_point_from_media_timeline" ] pub fn lsmash_get_closest_random_accessible_point_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , rap_number : * mut u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_closest_random_accessible_point_detail_from_media_timeline" ] pub fn lsmash_get_closest_random_accessible_point_detail_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , rap_number : * mut u32 , ra_flags : * mut lsmash_random_access_flag , leading : * mut u32 , distance : * mut u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_sample_count_in_media_timeline" ] pub fn lsmash_get_sample_count_in_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_max_sample_size_in_media_timeline" ] pub fn lsmash_get_max_sample_size_in_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_media_duration_from_media_timeline" ] pub fn lsmash_get_media_duration_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 ) -> u64 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_sample_from_media_timeline" ] pub fn lsmash_get_sample_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 ) -> * mut lsmash_sample_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_sample_info_from_media_timeline" ] pub fn lsmash_get_sample_info_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , sample : * mut lsmash_sample_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_sample_property_from_media_timeline" ] pub fn lsmash_get_sample_property_from_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 , prop : * mut lsmash_sample_property_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_sample_existence_in_media_timeline" ] pub fn lsmash_check_sample_existence_in_media_timeline ( root : * mut lsmash_root_t , track_ID : u32 , sample_number : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_media_timestamps" ] pub fn lsmash_set_media_timestamps ( root : * mut lsmash_root_t , track_ID : u32 , ts_list : * mut lsmash_media_ts_list_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_media_timestamps" ] pub fn lsmash_get_media_timestamps ( root : * mut lsmash_root_t , track_ID : u32 , ts_list : * mut lsmash_media_ts_list_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_delete_media_timestamps" ] pub fn lsmash_delete_media_timestamps ( ts_list : * mut lsmash_media_ts_list_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_max_sample_delay" ] pub fn lsmash_get_max_sample_delay ( ts_list : * mut lsmash_media_ts_list_t , max_sample_delay : * mut u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_sort_timestamps_decoding_order" ] pub fn lsmash_sort_timestamps_decoding_order ( ts_list : * mut lsmash_media_ts_list_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_sort_timestamps_composition_order" ] pub fn lsmash_sort_timestamps_composition_order ( ts_list : * mut lsmash_media_ts_list_t ) ; } pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Forbidden : lsmash_mp4sys_object_type_indication = 0 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Systems_ISO_14496_1 : lsmash_mp4sys_object_type_indication = 1 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Systems_ISO_14496_1_BIFSv2 : lsmash_mp4sys_object_type_indication = 2 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Interaction_Stream : lsmash_mp4sys_object_type_indication = 3 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Extended_BIFS : lsmash_mp4sys_object_type_indication = 4 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_AFX_Stream : lsmash_mp4sys_object_type_indication = 5 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Font_Data_Stream : lsmash_mp4sys_object_type_indication = 6 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Synthetised_Texture : lsmash_mp4sys_object_type_indication = 7 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Text_Stream : lsmash_mp4sys_object_type_indication = 8 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_14496_2 : lsmash_mp4sys_object_type_indication = 32 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_H264_ISO_14496_10 : lsmash_mp4sys_object_type_indication = 33 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Parameter_Sets_H_264_ISO_14496_10 : lsmash_mp4sys_object_type_indication = 34 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Audio_ISO_14496_3 : lsmash_mp4sys_object_type_indication = 64 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_13818_2_Simple_Profile : lsmash_mp4sys_object_type_indication = 96 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_13818_2_Main_Profile : lsmash_mp4sys_object_type_indication = 97 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_13818_2_SNR_Profile : lsmash_mp4sys_object_type_indication = 98 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_13818_2_Spatial_Profile : lsmash_mp4sys_object_type_indication = 99 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_13818_2_High_Profile : lsmash_mp4sys_object_type_indication = 100 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_13818_2_422_Profile : lsmash_mp4sys_object_type_indication = 101 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Audio_ISO_13818_7_Main_Profile : lsmash_mp4sys_object_type_indication = 102 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Audio_ISO_13818_7_LC_Profile : lsmash_mp4sys_object_type_indication = 103 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Audio_ISO_13818_7_SSR_Profile : lsmash_mp4sys_object_type_indication = 104 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Audio_ISO_13818_3 : lsmash_mp4sys_object_type_indication = 105 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_11172_2 : lsmash_mp4sys_object_type_indication = 106 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Audio_ISO_11172_3 : lsmash_mp4sys_object_type_indication = 107 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_10918_1 : lsmash_mp4sys_object_type_indication = 108 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_PNG : lsmash_mp4sys_object_type_indication = 109 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_Visual_ISO_15444_1_JPEG2000 : lsmash_mp4sys_object_type_indication = 110 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_EVRC_AUDIO : lsmash_mp4sys_object_type_indication = 160 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_SSMV_AUDIO : lsmash_mp4sys_object_type_indication = 161 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_3GPP2_CMF : lsmash_mp4sys_object_type_indication = 162 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_VC_1_VIDEO : lsmash_mp4sys_object_type_indication = 163 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_DRAC_VIDEO : lsmash_mp4sys_object_type_indication = 164 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_AC_3_AUDIO : lsmash_mp4sys_object_type_indication = 165 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_EC_3_AUDIO : lsmash_mp4sys_object_type_indication = 166 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_DRA1_AUDIO : lsmash_mp4sys_object_type_indication = 167 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_G719_AUDIO : lsmash_mp4sys_object_type_indication = 168 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_DTSC_AUDIO : lsmash_mp4sys_object_type_indication = 169 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_DTSH_AUDIO : lsmash_mp4sys_object_type_indication = 170 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_DTSL_AUDIO : lsmash_mp4sys_object_type_indication = 171 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_DTSE_AUDIO : lsmash_mp4sys_object_type_indication = 172 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_SQCP_AUDIO : lsmash_mp4sys_object_type_indication = 225 ; pub const lsmash_mp4sys_object_type_indication_MP4SYS_OBJECT_TYPE_NONE : lsmash_mp4sys_object_type_indication = 255 ; 
 /// Tools for creating CODEC Specific Information Extensions (Magic Cookies) 
 pub type lsmash_mp4sys_object_type_indication = u32 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_Forbidden : lsmash_mp4sys_stream_type = 0 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_ObjectDescriptorStream : lsmash_mp4sys_stream_type = 1 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_ClockReferenceStream : lsmash_mp4sys_stream_type = 2 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_SceneDescriptionStream : lsmash_mp4sys_stream_type = 3 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_VisualStream : lsmash_mp4sys_stream_type = 4 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_AudioStream : lsmash_mp4sys_stream_type = 5 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_MPEG7Stream : lsmash_mp4sys_stream_type = 6 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_IPMPStream : lsmash_mp4sys_stream_type = 7 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_ObjectContentInfoStream : lsmash_mp4sys_stream_type = 8 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_MPEGJStream : lsmash_mp4sys_stream_type = 9 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_InteractionStream : lsmash_mp4sys_stream_type = 10 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_IPMPToolStream : lsmash_mp4sys_stream_type = 11 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_FontDataStream : lsmash_mp4sys_stream_type = 12 ; pub const lsmash_mp4sys_stream_type_MP4SYS_STREAM_TYPE_StreamingText : lsmash_mp4sys_stream_type = 13 ; pub type lsmash_mp4sys_stream_type = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_mp4sys_decoder_specific_info_tag { _unused : [ u8 ; 0 ] , } pub type lsmash_mp4sys_decoder_specific_info_t = lsmash_mp4sys_decoder_specific_info_tag ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_mp4sys_decoder_parameters_t { pub objectTypeIndication : lsmash_mp4sys_object_type_indication , pub streamType : lsmash_mp4sys_stream_type , pub bufferSizeDB : u32 , pub maxBitrate : u32 , pub avgBitrate : u32 , pub dsi : * mut lsmash_mp4sys_decoder_specific_info_t , } # [ test ] fn bindgen_test_layout_lsmash_mp4sys_decoder_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_mp4sys_decoder_parameters_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_mp4sys_decoder_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_mp4sys_decoder_parameters_t > ( ) ) ) . objectTypeIndication as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) , "::" , stringify ! ( objectTypeIndication ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_mp4sys_decoder_parameters_t > ( ) ) ) . streamType as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) , "::" , stringify ! ( streamType ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_mp4sys_decoder_parameters_t > ( ) ) ) . bufferSizeDB as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) , "::" , stringify ! ( bufferSizeDB ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_mp4sys_decoder_parameters_t > ( ) ) ) . maxBitrate as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) , "::" , stringify ! ( maxBitrate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_mp4sys_decoder_parameters_t > ( ) ) ) . avgBitrate as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) , "::" , stringify ! ( avgBitrate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_mp4sys_decoder_parameters_t > ( ) ) ) . dsi as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_mp4sys_decoder_parameters_t ) , "::" , stringify ! ( dsi ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_mp4sys_decoder_specific_info" ] pub fn lsmash_set_mp4sys_decoder_specific_info ( param : * mut lsmash_mp4sys_decoder_parameters_t , payload : * mut u8 , payload_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_mp4sys_decoder_specific_info" ] pub fn lsmash_destroy_mp4sys_decoder_specific_info ( param : * mut lsmash_mp4sys_decoder_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_mp4sys_decoder_config" ] pub fn lsmash_create_mp4sys_decoder_config ( param : * mut lsmash_mp4sys_decoder_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } extern "C" { # [ link_name = "\u{1}_lsmash_mp4sys_get_object_type_indication" ] pub fn lsmash_mp4sys_get_object_type_indication ( summary : * mut lsmash_summary_t ) -> lsmash_mp4sys_object_type_indication ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_mp4sys_decoder_specific_info" ] pub fn lsmash_get_mp4sys_decoder_specific_info ( param : * mut lsmash_mp4sys_decoder_parameters_t , payload : * mut * mut u8 , payload_length : * mut u32 ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_ac3_specific_parameters_t { pub fscod : u8 , pub bsid : u8 , pub bsmod : u8 , pub acmod : u8 , pub lfeon : u8 , pub frmsizecod : u8 , } # [ test ] fn bindgen_test_layout_lsmash_ac3_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_ac3_specific_parameters_t > ( ) , 6usize , concat ! ( "Size of: " , stringify ! ( lsmash_ac3_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_ac3_specific_parameters_t > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( lsmash_ac3_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_ac3_specific_parameters_t > ( ) ) ) . fscod as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_ac3_specific_parameters_t ) , "::" , stringify ! ( fscod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_ac3_specific_parameters_t > ( ) ) ) . bsid as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_ac3_specific_parameters_t ) , "::" , stringify ! ( bsid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_ac3_specific_parameters_t > ( ) ) ) . bsmod as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_ac3_specific_parameters_t ) , "::" , stringify ! ( bsmod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_ac3_specific_parameters_t > ( ) ) ) . acmod as * const _ as usize } , 3usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_ac3_specific_parameters_t ) , "::" , stringify ! ( acmod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_ac3_specific_parameters_t > ( ) ) ) . lfeon as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_ac3_specific_parameters_t ) , "::" , stringify ! ( lfeon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_ac3_specific_parameters_t > ( ) ) ) . frmsizecod as * const _ as usize } , 5usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_ac3_specific_parameters_t ) , "::" , stringify ! ( frmsizecod ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_ac3_specific_parameters_from_syncframe" ] pub fn lsmash_setup_ac3_specific_parameters_from_syncframe ( param : * mut lsmash_ac3_specific_parameters_t , data : * mut u8 , data_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_ac3_specific_info" ] pub fn lsmash_create_ac3_specific_info ( param : * mut lsmash_ac3_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_eac3_substream_info_t { pub fscod : u8 , pub bsid : u8 , pub bsmod : u8 , pub acmod : u8 , pub lfeon : u8 , pub num_dep_sub : u8 , pub chan_loc : u16 , } # [ test ] fn bindgen_test_layout_lsmash_eac3_substream_info_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_eac3_substream_info_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_eac3_substream_info_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_eac3_substream_info_t > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( lsmash_eac3_substream_info_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . fscod as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( fscod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . bsid as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( bsid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . bsmod as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( bsmod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . acmod as * const _ as usize } , 3usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( acmod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . lfeon as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( lfeon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . num_dep_sub as * const _ as usize } , 5usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( num_dep_sub ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_substream_info_t > ( ) ) ) . chan_loc as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_substream_info_t ) , "::" , stringify ! ( chan_loc ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_eac3_specific_parameters_t { pub data_rate : u16 , pub num_ind_sub : u8 , pub independent_info : [ lsmash_eac3_substream_info_t ; 8usize ] , } # [ test ] fn bindgen_test_layout_lsmash_eac3_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_eac3_specific_parameters_t > ( ) , 68usize , concat ! ( "Size of: " , stringify ! ( lsmash_eac3_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_eac3_specific_parameters_t > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( lsmash_eac3_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_specific_parameters_t > ( ) ) ) . data_rate as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_specific_parameters_t ) , "::" , stringify ! ( data_rate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_specific_parameters_t > ( ) ) ) . num_ind_sub as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_specific_parameters_t ) , "::" , stringify ! ( num_ind_sub ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_eac3_specific_parameters_t > ( ) ) ) . independent_info as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_eac3_specific_parameters_t ) , "::" , stringify ! ( independent_info ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_eac3_specific_parameters_from_frame" ] pub fn lsmash_setup_eac3_specific_parameters_from_frame ( param : * mut lsmash_eac3_specific_parameters_t , data : * mut u8 , data_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_eac3_get_chan_loc_from_chanmap" ] pub fn lsmash_eac3_get_chan_loc_from_chanmap ( chanmap : u16 ) -> u16 ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_eac3_specific_info" ] pub fn lsmash_create_eac3_specific_info ( param : * mut lsmash_eac3_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } pub const lsmash_dts_construction_flag_DTS_CORE_SUBSTREAM_CORE_FLAG : lsmash_dts_construction_flag = 1 ; pub const lsmash_dts_construction_flag_DTS_CORE_SUBSTREAM_XXCH_FLAG : lsmash_dts_construction_flag = 2 ; pub const lsmash_dts_construction_flag_DTS_CORE_SUBSTREAM_X96_FLAG : lsmash_dts_construction_flag = 4 ; pub const lsmash_dts_construction_flag_DTS_CORE_SUBSTREAM_XCH_FLAG : lsmash_dts_construction_flag = 8 ; pub const lsmash_dts_construction_flag_DTS_EXT_SUBSTREAM_CORE_FLAG : lsmash_dts_construction_flag = 16 ; pub const lsmash_dts_construction_flag_DTS_EXT_SUBSTREAM_XBR_FLAG : lsmash_dts_construction_flag = 32 ; pub const lsmash_dts_construction_flag_DTS_EXT_SUBSTREAM_XXCH_FLAG : lsmash_dts_construction_flag = 64 ; pub const lsmash_dts_construction_flag_DTS_EXT_SUBSTREAM_X96_FLAG : lsmash_dts_construction_flag = 128 ; pub const lsmash_dts_construction_flag_DTS_EXT_SUBSTREAM_LBR_FLAG : lsmash_dts_construction_flag = 256 ; pub const lsmash_dts_construction_flag_DTS_EXT_SUBSTREAM_XLL_FLAG : lsmash_dts_construction_flag = 512 ; pub type lsmash_dts_construction_flag = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_dts_reserved_box_tag { _unused : [ u8 ; 0 ] , } pub type lsmash_dts_reserved_box_t = lsmash_dts_reserved_box_tag ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_dts_specific_parameters_t { pub DTSSamplingFrequency : u32 , pub maxBitrate : u32 , pub avgBitrate : u32 , pub pcmSampleDepth : u8 , pub FrameDuration : u8 , pub StreamConstruction : u8 , pub CoreLFEPresent : u8 , pub CoreLayout : u8 , pub CoreSize : u16 , pub StereoDownmix : u8 , pub RepresentationType : u8 , pub ChannelLayout : u16 , pub MultiAssetFlag : u8 , pub LBRDurationMod : u8 , pub box_ : * mut lsmash_dts_reserved_box_t , } # [ test ] fn bindgen_test_layout_lsmash_dts_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_dts_specific_parameters_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( lsmash_dts_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_dts_specific_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_dts_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . DTSSamplingFrequency as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( DTSSamplingFrequency ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . maxBitrate as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( maxBitrate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . avgBitrate as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( avgBitrate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . pcmSampleDepth as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( pcmSampleDepth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . FrameDuration as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( FrameDuration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . StreamConstruction as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( StreamConstruction ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . CoreLFEPresent as * const _ as usize } , 15usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( CoreLFEPresent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . CoreLayout as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( CoreLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . CoreSize as * const _ as usize } , 18usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( CoreSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . StereoDownmix as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( StereoDownmix ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . RepresentationType as * const _ as usize } , 21usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( RepresentationType ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . ChannelLayout as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( ChannelLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . MultiAssetFlag as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( MultiAssetFlag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . LBRDurationMod as * const _ as usize } , 25usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( LBRDurationMod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_dts_specific_parameters_t > ( ) ) ) . box_ as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_dts_specific_parameters_t ) , "::" , stringify ! ( box_ ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_dts_specific_parameters_from_frame" ] pub fn lsmash_setup_dts_specific_parameters_from_frame ( param : * mut lsmash_dts_specific_parameters_t , data : * mut u8 , data_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_dts_get_stream_construction" ] pub fn lsmash_dts_get_stream_construction ( flags : lsmash_dts_construction_flag ) -> u8 ; } extern "C" { # [ link_name = "\u{1}_lsmash_dts_get_construction_flags" ] pub fn lsmash_dts_get_construction_flags ( stream_construction : u8 ) -> lsmash_dts_construction_flag ; } extern "C" { # [ link_name = "\u{1}_lsmash_dts_get_codingname" ] pub fn lsmash_dts_get_codingname ( param : * mut lsmash_dts_specific_parameters_t ) -> lsmash_codec_type_t ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_dts_specific_info" ] pub fn lsmash_create_dts_specific_info ( param : * mut lsmash_dts_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } extern "C" { # [ link_name = "\u{1}_lsmash_append_dts_reserved_box" ] pub fn lsmash_append_dts_reserved_box ( param : * mut lsmash_dts_specific_parameters_t , box_data : * const u8 , box_size : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_remove_dts_reserved_box" ] pub fn lsmash_remove_dts_reserved_box ( param : * mut lsmash_dts_specific_parameters_t ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_alac_specific_parameters_t { pub frameLength : u32 , pub bitDepth : u8 , pub numChannels : u8 , pub maxFrameBytes : u32 , pub avgBitrate : u32 , pub sampleRate : u32 , } # [ test ] fn bindgen_test_layout_lsmash_alac_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_alac_specific_parameters_t > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( lsmash_alac_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_alac_specific_parameters_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_alac_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_alac_specific_parameters_t > ( ) ) ) . frameLength as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_alac_specific_parameters_t ) , "::" , stringify ! ( frameLength ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_alac_specific_parameters_t > ( ) ) ) . bitDepth as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_alac_specific_parameters_t ) , "::" , stringify ! ( bitDepth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_alac_specific_parameters_t > ( ) ) ) . numChannels as * const _ as usize } , 5usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_alac_specific_parameters_t ) , "::" , stringify ! ( numChannels ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_alac_specific_parameters_t > ( ) ) ) . maxFrameBytes as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_alac_specific_parameters_t ) , "::" , stringify ! ( maxFrameBytes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_alac_specific_parameters_t > ( ) ) ) . avgBitrate as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_alac_specific_parameters_t ) , "::" , stringify ! ( avgBitrate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_alac_specific_parameters_t > ( ) ) ) . sampleRate as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_alac_specific_parameters_t ) , "::" , stringify ! ( sampleRate ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_alac_specific_info" ] pub fn lsmash_create_alac_specific_info ( param : * mut lsmash_alac_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_h264_bitrate_t { pub bufferSizeDB : u32 , pub maxBitrate : u32 , pub avgBitrate : u32 , } # [ test ] fn bindgen_test_layout_lsmash_h264_bitrate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_h264_bitrate_t > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( lsmash_h264_bitrate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_h264_bitrate_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_h264_bitrate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_bitrate_t > ( ) ) ) . bufferSizeDB as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_bitrate_t ) , "::" , stringify ! ( bufferSizeDB ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_bitrate_t > ( ) ) ) . maxBitrate as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_bitrate_t ) , "::" , stringify ! ( maxBitrate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_bitrate_t > ( ) ) ) . avgBitrate as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_bitrate_t ) , "::" , stringify ! ( avgBitrate ) ) ) ; } pub const lsmash_dcr_nalu_appendable_DCR_NALU_APPEND_NEW_SAMPLE_ENTRY_REQUIRED : lsmash_dcr_nalu_appendable = -3 ; pub const lsmash_dcr_nalu_appendable_DCR_NALU_APPEND_NEW_DCR_REQUIRED : lsmash_dcr_nalu_appendable = -2 ; pub const lsmash_dcr_nalu_appendable_DCR_NALU_APPEND_ERROR : lsmash_dcr_nalu_appendable = -1 ; pub const lsmash_dcr_nalu_appendable_DCR_NALU_APPEND_DUPLICATED : lsmash_dcr_nalu_appendable = 0 ; pub const lsmash_dcr_nalu_appendable_DCR_NALU_APPEND_POSSIBLE : lsmash_dcr_nalu_appendable = 1 ; pub type lsmash_dcr_nalu_appendable = i32 ; pub const lsmash_h264_parameter_set_type_H264_PARAMETER_SET_TYPE_SPS : lsmash_h264_parameter_set_type = 0 ; pub const lsmash_h264_parameter_set_type_H264_PARAMETER_SET_TYPE_PPS : lsmash_h264_parameter_set_type = 1 ; pub const lsmash_h264_parameter_set_type_H264_PARAMETER_SET_TYPE_SPSEXT : lsmash_h264_parameter_set_type = 2 ; pub const lsmash_h264_parameter_set_type_H264_PARAMETER_SET_TYPE_NUM : lsmash_h264_parameter_set_type = 3 ; pub type lsmash_h264_parameter_set_type = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_h264_parameter_sets_tag { _unused : [ u8 ; 0 ] , } pub type lsmash_h264_parameter_sets_t = lsmash_h264_parameter_sets_tag ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_h264_specific_parameters_t { pub AVCProfileIndication : u8 , pub profile_compatibility : u8 , pub AVCLevelIndication : u8 , pub lengthSizeMinusOne : u8 , pub chroma_format : u8 , pub bit_depth_luma_minus8 : u8 , pub bit_depth_chroma_minus8 : u8 , pub parameter_sets : * mut lsmash_h264_parameter_sets_t , } # [ test ] fn bindgen_test_layout_lsmash_h264_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_h264_specific_parameters_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_h264_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_h264_specific_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_h264_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . AVCProfileIndication as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( AVCProfileIndication ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . profile_compatibility as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( profile_compatibility ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . AVCLevelIndication as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( AVCLevelIndication ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . lengthSizeMinusOne as * const _ as usize } , 3usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( lengthSizeMinusOne ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . chroma_format as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( chroma_format ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . bit_depth_luma_minus8 as * const _ as usize } , 5usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( bit_depth_luma_minus8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . bit_depth_chroma_minus8 as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( bit_depth_chroma_minus8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_h264_specific_parameters_t > ( ) ) ) . parameter_sets as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_h264_specific_parameters_t ) , "::" , stringify ! ( parameter_sets ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_h264_specific_parameters_from_access_unit" ] pub fn lsmash_setup_h264_specific_parameters_from_access_unit ( param : * mut lsmash_h264_specific_parameters_t , data : * mut u8 , data_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_h264_parameter_sets" ] pub fn lsmash_destroy_h264_parameter_sets ( param : * mut lsmash_h264_specific_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_h264_parameter_set_appendable" ] pub fn lsmash_check_h264_parameter_set_appendable ( param : * mut lsmash_h264_specific_parameters_t , ps_type : lsmash_h264_parameter_set_type , ps_data : * mut :: std :: os :: raw :: c_void , ps_length : u32 ) -> lsmash_dcr_nalu_appendable ; } extern "C" { # [ link_name = "\u{1}_lsmash_append_h264_parameter_set" ] pub fn lsmash_append_h264_parameter_set ( param : * mut lsmash_h264_specific_parameters_t , ps_type : lsmash_h264_parameter_set_type , ps_data : * mut :: std :: os :: raw :: c_void , ps_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_h264_specific_info" ] pub fn lsmash_create_h264_specific_info ( param : * mut lsmash_h264_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } pub const lsmash_hevc_dcr_nalu_type_HEVC_DCR_NALU_TYPE_VPS : lsmash_hevc_dcr_nalu_type = 0 ; pub const lsmash_hevc_dcr_nalu_type_HEVC_DCR_NALU_TYPE_SPS : lsmash_hevc_dcr_nalu_type = 1 ; pub const lsmash_hevc_dcr_nalu_type_HEVC_DCR_NALU_TYPE_PPS : lsmash_hevc_dcr_nalu_type = 2 ; pub const lsmash_hevc_dcr_nalu_type_HEVC_DCR_NALU_TYPE_PREFIX_SEI : lsmash_hevc_dcr_nalu_type = 3 ; pub const lsmash_hevc_dcr_nalu_type_HEVC_DCR_NALU_TYPE_SUFFIX_SEI : lsmash_hevc_dcr_nalu_type = 4 ; pub const lsmash_hevc_dcr_nalu_type_HEVC_DCR_NALU_TYPE_NUM : lsmash_hevc_dcr_nalu_type = 5 ; pub type lsmash_hevc_dcr_nalu_type = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_hevc_parameter_arrays_tag { _unused : [ u8 ; 0 ] , } pub type lsmash_hevc_parameter_arrays_t = lsmash_hevc_parameter_arrays_tag ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_hevc_specific_parameters_t { pub general_profile_space : u8 , pub general_tier_flag : u8 , pub general_profile_idc : u8 , pub general_profile_compatibility_flags : u32 , pub general_constraint_indicator_flags : u64 , pub general_level_idc : u8 , pub min_spatial_segmentation_idc : u16 , pub parallelismType : u8 , pub chromaFormat : u8 , pub bitDepthLumaMinus8 : u8 , pub bitDepthChromaMinus8 : u8 , pub avgFrameRate : u16 , pub constantFrameRate : u8 , pub numTemporalLayers : u8 , pub temporalIdNested : u8 , pub lengthSizeMinusOne : u8 , pub parameter_arrays : * mut lsmash_hevc_parameter_arrays_t , } # [ test ] fn bindgen_test_layout_lsmash_hevc_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_hevc_specific_parameters_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( lsmash_hevc_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_hevc_specific_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_hevc_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . general_profile_space as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( general_profile_space ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . general_tier_flag as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( general_tier_flag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . general_profile_idc as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( general_profile_idc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . general_profile_compatibility_flags as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( general_profile_compatibility_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . general_constraint_indicator_flags as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( general_constraint_indicator_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . general_level_idc as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( general_level_idc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . min_spatial_segmentation_idc as * const _ as usize } , 18usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( min_spatial_segmentation_idc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . parallelismType as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( parallelismType ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . chromaFormat as * const _ as usize } , 21usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( chromaFormat ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . bitDepthLumaMinus8 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( bitDepthLumaMinus8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . bitDepthChromaMinus8 as * const _ as usize } , 23usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( bitDepthChromaMinus8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . avgFrameRate as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( avgFrameRate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . constantFrameRate as * const _ as usize } , 26usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( constantFrameRate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . numTemporalLayers as * const _ as usize } , 27usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( numTemporalLayers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . temporalIdNested as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( temporalIdNested ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . lengthSizeMinusOne as * const _ as usize } , 29usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( lengthSizeMinusOne ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_hevc_specific_parameters_t > ( ) ) ) . parameter_arrays as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_hevc_specific_parameters_t ) , "::" , stringify ! ( parameter_arrays ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_hevc_specific_parameters_from_access_unit" ] pub fn lsmash_setup_hevc_specific_parameters_from_access_unit ( param : * mut lsmash_hevc_specific_parameters_t , data : * mut u8 , data_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_hevc_parameter_arrays" ] pub fn lsmash_destroy_hevc_parameter_arrays ( param : * mut lsmash_hevc_specific_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_check_hevc_dcr_nalu_appendable" ] pub fn lsmash_check_hevc_dcr_nalu_appendable ( param : * mut lsmash_hevc_specific_parameters_t , ps_type : lsmash_hevc_dcr_nalu_type , ps_data : * mut :: std :: os :: raw :: c_void , ps_length : u32 ) -> lsmash_dcr_nalu_appendable ; } extern "C" { # [ link_name = "\u{1}_lsmash_append_hevc_dcr_nalu" ] pub fn lsmash_append_hevc_dcr_nalu ( param : * mut lsmash_hevc_specific_parameters_t , ps_type : lsmash_hevc_dcr_nalu_type , ps_data : * mut :: std :: os :: raw :: c_void , ps_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_hevc_array_completeness" ] pub fn lsmash_set_hevc_array_completeness ( param : * mut lsmash_hevc_specific_parameters_t , ps_type : lsmash_hevc_dcr_nalu_type , array_completeness : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_hevc_array_completeness" ] pub fn lsmash_get_hevc_array_completeness ( param : * mut lsmash_hevc_specific_parameters_t , ps_type : lsmash_hevc_dcr_nalu_type , array_completeness : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_hevc_specific_info" ] pub fn lsmash_create_hevc_specific_info ( param : * mut lsmash_hevc_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_vc1_header_tag { _unused : [ u8 ; 0 ] , } pub type lsmash_vc1_header_t = lsmash_vc1_header_tag ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_vc1_specific_parameters_t { pub profile : u8 , pub level : u8 , pub cbr : u8 , pub interlaced : u8 , pub multiple_sequence : u8 , pub multiple_entry : u8 , pub slice_present : u8 , pub bframe_present : u8 , pub framerate : u32 , pub seqhdr : * mut lsmash_vc1_header_t , pub ephdr : * mut lsmash_vc1_header_t , } # [ test ] fn bindgen_test_layout_lsmash_vc1_specific_parameters_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_vc1_specific_parameters_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( lsmash_vc1_specific_parameters_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_vc1_specific_parameters_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_vc1_specific_parameters_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . profile as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( profile ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . level as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( level ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . cbr as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( cbr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . interlaced as * const _ as usize } , 3usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( interlaced ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . multiple_sequence as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( multiple_sequence ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . multiple_entry as * const _ as usize } , 5usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( multiple_entry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . slice_present as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( slice_present ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . bframe_present as * const _ as usize } , 7usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( bframe_present ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . framerate as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( framerate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . seqhdr as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( seqhdr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_vc1_specific_parameters_t > ( ) ) ) . ephdr as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_vc1_specific_parameters_t ) , "::" , stringify ! ( ephdr ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_setup_vc1_specific_parameters_from_access_unit" ] pub fn lsmash_setup_vc1_specific_parameters_from_access_unit ( param : * mut lsmash_vc1_specific_parameters_t , data : * mut u8 , data_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_destroy_vc1_headers" ] pub fn lsmash_destroy_vc1_headers ( param : * mut lsmash_vc1_specific_parameters_t ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_put_vc1_header" ] pub fn lsmash_put_vc1_header ( param : * mut lsmash_vc1_specific_parameters_t , hdr_data : * mut :: std :: os :: raw :: c_void , hdr_length : u32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_vc1_specific_info" ] pub fn lsmash_create_vc1_specific_info ( param : * mut lsmash_vc1_specific_parameters_t , data_length : * mut u32 ) -> * mut u8 ; } pub const lsmash_scale_method_ISOM_SCALE_METHOD_FILL : lsmash_scale_method = 1 ; pub const lsmash_scale_method_ISOM_SCALE_METHOD_HIDDEN : lsmash_scale_method = 2 ; pub const lsmash_scale_method_ISOM_SCALE_METHOD_MEET : lsmash_scale_method = 3 ; pub const lsmash_scale_method_ISOM_SCALE_METHOD_SLICE_X : lsmash_scale_method = 4 ; pub const lsmash_scale_method_ISOM_SCALE_METHOD_SLICE_Y : lsmash_scale_method = 5 ; pub type lsmash_scale_method = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_isom_sample_scale_t { pub constraint_flag : u8 , pub scale_method : lsmash_scale_method , pub display_center_x : i16 , pub display_center_y : i16 , } # [ test ] fn bindgen_test_layout_lsmash_isom_sample_scale_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_isom_sample_scale_t > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( lsmash_isom_sample_scale_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_isom_sample_scale_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_isom_sample_scale_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_isom_sample_scale_t > ( ) ) ) . constraint_flag as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_isom_sample_scale_t ) , "::" , stringify ! ( constraint_flag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_isom_sample_scale_t > ( ) ) ) . scale_method as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_isom_sample_scale_t ) , "::" , stringify ! ( scale_method ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_isom_sample_scale_t > ( ) ) ) . display_center_x as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_isom_sample_scale_t ) , "::" , stringify ! ( display_center_x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_isom_sample_scale_t > ( ) ) ) . display_center_y as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_isom_sample_scale_t ) , "::" , stringify ! ( display_center_y ) ) ) ; } pub const lsmash_qt_compression_quality_QT_COMPRESSION_QUALITY_LOSSLESS : lsmash_qt_compression_quality = 1024 ; pub const lsmash_qt_compression_quality_QT_COMPRESSION_QUALITY_MAX : lsmash_qt_compression_quality = 1023 ; pub const lsmash_qt_compression_quality_QT_COMPRESSION_QUALITY_MIN : lsmash_qt_compression_quality = 0 ; pub const lsmash_qt_compression_quality_QT_COMPRESSION_QUALITY_LOW : lsmash_qt_compression_quality = 256 ; pub const lsmash_qt_compression_quality_QT_COMPRESSION_QUALITY_NORMAL : lsmash_qt_compression_quality = 512 ; pub const lsmash_qt_compression_quality_QT_COMPRESSION_QUALITY_HIGH : lsmash_qt_compression_quality = 768 ; pub type lsmash_qt_compression_quality = u32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct lsmash_qt_color_table_t { pub seed : u32 , pub flags : u16 , pub size : u16 , pub array : [ lsmash_qt_color_table_t__bindgen_ty_1 ; 256usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_color_table_t__bindgen_ty_1 { pub unused : u16 , pub r : u16 , pub g : u16 , pub b : u16 , } # [ test ] fn bindgen_test_layout_lsmash_qt_color_table_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_color_table_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_color_table_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_color_table_t__bindgen_ty_1 > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_color_table_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t__bindgen_ty_1 > ( ) ) ) . unused as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t__bindgen_ty_1 ) , "::" , stringify ! ( unused ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t__bindgen_ty_1 > ( ) ) ) . r as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t__bindgen_ty_1 ) , "::" , stringify ! ( r ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t__bindgen_ty_1 > ( ) ) ) . g as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t__bindgen_ty_1 ) , "::" , stringify ! ( g ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t__bindgen_ty_1 > ( ) ) ) . b as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t__bindgen_ty_1 ) , "::" , stringify ! ( b ) ) ) ; } # [ test ] fn bindgen_test_layout_lsmash_qt_color_table_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_color_table_t > ( ) , 2056usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_color_table_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_color_table_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_color_table_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t > ( ) ) ) . seed as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t ) , "::" , stringify ! ( seed ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t > ( ) ) ) . flags as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t > ( ) ) ) . size as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_color_table_t > ( ) ) ) . array as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_color_table_t ) , "::" , stringify ! ( array ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct lsmash_qt_video_common_t { pub revision_level : i16 , pub vendor : i32 , pub temporalQuality : lsmash_qt_compression_quality , pub spatialQuality : lsmash_qt_compression_quality , pub horizontal_resolution : u32 , pub vertical_resolution : u32 , pub dataSize : u32 , pub frame_count : u16 , pub color_table_ID : i16 , pub color_table : lsmash_qt_color_table_t , } # [ test ] fn bindgen_test_layout_lsmash_qt_video_common_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_video_common_t > ( ) , 2088usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_video_common_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_video_common_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_video_common_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . revision_level as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( revision_level ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . vendor as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( vendor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . temporalQuality as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( temporalQuality ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . spatialQuality as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( spatialQuality ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . horizontal_resolution as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( horizontal_resolution ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . vertical_resolution as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( vertical_resolution ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . dataSize as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( dataSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . frame_count as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( frame_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . color_table_ID as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( color_table_ID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_video_common_t > ( ) ) ) . color_table as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_video_common_t ) , "::" , stringify ! ( color_table ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_gamma_t { pub level : u32 , } # [ test ] fn bindgen_test_layout_lsmash_qt_gamma_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_gamma_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_gamma_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_gamma_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_gamma_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_gamma_t > ( ) ) ) . level as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_gamma_t ) , "::" , stringify ! ( level ) ) ) ; } pub const lsmash_qt_number_of_fields_QT_FIELEDS_SCAN_PROGRESSIVE : lsmash_qt_number_of_fields = 1 ; pub const lsmash_qt_number_of_fields_QT_FIELEDS_SCAN_INTERLACED : lsmash_qt_number_of_fields = 2 ; pub type lsmash_qt_number_of_fields = u32 ; pub const lsmash_qt_field_orderings_QT_FIELD_ORDERINGS_UNKNOWN : lsmash_qt_field_orderings = 0 ; pub const lsmash_qt_field_orderings_QT_FIELD_ORDERINGS_TEMPORAL_TOP_FIRST : lsmash_qt_field_orderings = 1 ; pub const lsmash_qt_field_orderings_QT_FIELD_ORDERINGS_TEMPORAL_BOTTOM_FIRST : lsmash_qt_field_orderings = 6 ; pub const lsmash_qt_field_orderings_QT_FIELD_ORDERINGS_SPATIAL_FIRST_LINE_EARLY : lsmash_qt_field_orderings = 9 ; pub const lsmash_qt_field_orderings_QT_FIELD_ORDERINGS_SPATIAL_FIRST_LINE_LATE : lsmash_qt_field_orderings = 14 ; pub type lsmash_qt_field_orderings = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_field_info_t { pub fields : lsmash_qt_number_of_fields , pub detail : lsmash_qt_field_orderings , } # [ test ] fn bindgen_test_layout_lsmash_qt_field_info_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_field_info_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_field_info_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_field_info_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_field_info_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_field_info_t > ( ) ) ) . fields as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_field_info_t ) , "::" , stringify ! ( fields ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_field_info_t > ( ) ) ) . detail as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_field_info_t ) , "::" , stringify ! ( detail ) ) ) ; } pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_1_MONOCHROME : lsmash_qt_pixel_format = 1 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_2_INDEXED : lsmash_qt_pixel_format = 2 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_4_INDEXED : lsmash_qt_pixel_format = 4 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_8_INDEXED : lsmash_qt_pixel_format = 8 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_1_INDEXED_GRAY_WHITE_IS_ZERO : lsmash_qt_pixel_format = 33 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_2_INDEXED_GRAY_WHITE_IS_ZERO : lsmash_qt_pixel_format = 34 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_4_INDEXED_GRAY_WHITE_IS_ZERO : lsmash_qt_pixel_format = 36 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_8_INDEXED_GRAY_WHITE_IS_ZERO : lsmash_qt_pixel_format = 40 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_16BE555 : lsmash_qt_pixel_format = 16 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_16LE555 : lsmash_qt_pixel_format = 1278555445 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_16LE5551 : lsmash_qt_pixel_format = 892679473 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_16BE565 : lsmash_qt_pixel_format = 1110783541 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_16LE565 : lsmash_qt_pixel_format = 1278555701 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_24RGB : lsmash_qt_pixel_format = 24 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_24BGR : lsmash_qt_pixel_format = 842285639 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_32ARGB : lsmash_qt_pixel_format = 32 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_32BGRA : lsmash_qt_pixel_format = 1111970369 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_32ABGR : lsmash_qt_pixel_format = 1094862674 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_32RGBA : lsmash_qt_pixel_format = 1380401729 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_64ARGB : lsmash_qt_pixel_format = 1647719521 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_48RGB : lsmash_qt_pixel_format = 1647589490 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_32_ALPHA_GRAY : lsmash_qt_pixel_format = 1647522401 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_16_GRAY : lsmash_qt_pixel_format = 1647392359 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_30RGB : lsmash_qt_pixel_format = 1378955371 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_422YpCbCr8 : lsmash_qt_pixel_format = 846624121 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_4444YpCbCrA8 : lsmash_qt_pixel_format = 1983131704 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_4444YpCbCrA8R : lsmash_qt_pixel_format = 1916022840 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_4444AYpCbCr8 : lsmash_qt_pixel_format = 2033463352 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_4444AYpCbCr16 : lsmash_qt_pixel_format = 2033463606 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_444YpCbCr8 : lsmash_qt_pixel_format = 1983066168 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_422YpCbCr16 : lsmash_qt_pixel_format = 1983000886 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_422YpCbCr10 : lsmash_qt_pixel_format = 1983000880 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_444YpCbCr10 : lsmash_qt_pixel_format = 1983131952 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_420YpCbCr8_PLANAR : lsmash_qt_pixel_format = 2033463856 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_420YpCbCr8_PLANAR_FULL_RANGE : lsmash_qt_pixel_format = 1714696752 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_422YpCbCr_4A_8_BIPLANAR : lsmash_qt_pixel_format = 1630697081 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_420YpCbCr8_BIPLANAR_VIDEO_RANGE : lsmash_qt_pixel_format = 875704438 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_420YpCbCr8_BIPLANAR_FULL_RANGE : lsmash_qt_pixel_format = 875704422 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_422YpCbCr8_YUVS : lsmash_qt_pixel_format = 2037741171 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_422YpCbCr8_FULL_RANGE : lsmash_qt_pixel_format = 2037741158 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_SOFTVOUT_SOFTCODEC : lsmash_qt_pixel_format = 1936680564 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_VIEW_GRAPHICS : lsmash_qt_pixel_format = 1987536754 ; pub const lsmash_qt_pixel_format_QT_PIXEL_FORMAT_TYPE_SGI : lsmash_qt_pixel_format = 1397184067 ; pub type lsmash_qt_pixel_format = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_pixel_format_t { pub pixel_format : lsmash_qt_pixel_format , } # [ test ] fn bindgen_test_layout_lsmash_qt_pixel_format_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_pixel_format_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_pixel_format_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_pixel_format_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_pixel_format_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_pixel_format_t > ( ) ) ) . pixel_format as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_pixel_format_t ) , "::" , stringify ! ( pixel_format ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_significant_bits_t { pub significantBits : u8 , } # [ test ] fn bindgen_test_layout_lsmash_qt_significant_bits_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_significant_bits_t > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_significant_bits_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_significant_bits_t > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_significant_bits_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_significant_bits_t > ( ) ) ) . significantBits as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_significant_bits_t ) , "::" , stringify ! ( significantBits ) ) ) ; } pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_NOT_COMPRESSED : lsmash_qt_audio_compression_id = 0 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_FIXED_COMPRESSION : lsmash_qt_audio_compression_id = -1 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_VARIABLE_COMPRESSION : lsmash_qt_audio_compression_id = -2 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_TWO_TO_ONE : lsmash_qt_audio_compression_id = 1 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_EIGHT_TO_THREE : lsmash_qt_audio_compression_id = 2 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_THREE_TO_ONE : lsmash_qt_audio_compression_id = 3 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_SIX_TO_ONE : lsmash_qt_audio_compression_id = 4 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_SIX_TO_ONE_PACKET_SIZE : lsmash_qt_audio_compression_id = 8 ; pub const lsmash_qt_audio_compression_id_QT_AUDIO_COMPRESSION_ID_THREE_TO_ONE_PACKET_SIZE : lsmash_qt_audio_compression_id = 16 ; pub type lsmash_qt_audio_compression_id = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_audio_common_t { pub revision_level : i16 , pub vendor : i32 , pub compression_ID : lsmash_qt_audio_compression_id , } # [ test ] fn bindgen_test_layout_lsmash_qt_audio_common_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_audio_common_t > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_audio_common_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_audio_common_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_audio_common_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_audio_common_t > ( ) ) ) . revision_level as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_audio_common_t ) , "::" , stringify ! ( revision_level ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_audio_common_t > ( ) ) ) . vendor as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_audio_common_t ) , "::" , stringify ! ( vendor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_audio_common_t > ( ) ) ) . compression_ID as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_audio_common_t ) , "::" , stringify ! ( compression_ID ) ) ) ; } pub const lsmash_channel_label_QT_CHANNEL_LABEL_UNKNOWN : lsmash_channel_label = -1 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_UNUSED : lsmash_channel_label = 0 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_USE_COORDINATES : lsmash_channel_label = 100 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LEFT : lsmash_channel_label = 1 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_RIGHT : lsmash_channel_label = 2 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_CENTER : lsmash_channel_label = 3 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LFE_SCREEN : lsmash_channel_label = 4 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LEFT_SURROUND : lsmash_channel_label = 5 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_RIGHT_SUROUND : lsmash_channel_label = 6 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LEFT_CENTER : lsmash_channel_label = 7 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_RIGHT_CENTER : lsmash_channel_label = 8 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_CENTER_SURROUND : lsmash_channel_label = 9 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LEFT_SURROUND_DIRECT : lsmash_channel_label = 10 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_RIGHT_SURROUND_DIRECT : lsmash_channel_label = 11 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_TOP_CENTER_SURROUND : lsmash_channel_label = 12 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_VERTICAL_HEIGHT_LEFT : lsmash_channel_label = 13 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_VERTICAL_HEIGHT_CENTER : lsmash_channel_label = 14 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_VERTICAL_HEIGHT_RIGHT : lsmash_channel_label = 15 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_TOP_BACK_LEFT : lsmash_channel_label = 16 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_TOP_BACK_CENTER : lsmash_channel_label = 17 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_TOP_BACK_RIGHT : lsmash_channel_label = 18 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_REAR_SURROUND_LEFT : lsmash_channel_label = 33 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_REAR_SURROUND_RIGHT : lsmash_channel_label = 34 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LEFT_WIDE : lsmash_channel_label = 35 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_RIGHT_WIDE : lsmash_channel_label = 36 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LFE2 : lsmash_channel_label = 37 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_LEFT_TOTAL : lsmash_channel_label = 38 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_RIGHT_TOTAL : lsmash_channel_label = 39 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_HEARING_IMPAIRED : lsmash_channel_label = 40 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_NARRATION : lsmash_channel_label = 41 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_MONO : lsmash_channel_label = 42 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DIALOG_CENTRIC_MIX : lsmash_channel_label = 43 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_CENTER_SURROUND_DIRECT : lsmash_channel_label = 44 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_HAPTIC : lsmash_channel_label = 45 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_AMBISONIC_W : lsmash_channel_label = 200 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_AMBISONIC_X : lsmash_channel_label = 201 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_AMBISONIC_Y : lsmash_channel_label = 202 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_AMBISONIC_Z : lsmash_channel_label = 203 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_MS_MID : lsmash_channel_label = 204 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_MS_SIDE : lsmash_channel_label = 205 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_XY_X : lsmash_channel_label = 206 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_XY_Y : lsmash_channel_label = 207 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_HEADPHONES_LEFT : lsmash_channel_label = 301 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_HEADPHONES_RIGHT : lsmash_channel_label = 302 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_CLICK_TRACK : lsmash_channel_label = 304 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_FOREIGN_LANGUAGE : lsmash_channel_label = 305 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE : lsmash_channel_label = 400 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_0 : lsmash_channel_label = 65536 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_1 : lsmash_channel_label = 65537 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_2 : lsmash_channel_label = 65538 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_3 : lsmash_channel_label = 65539 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_4 : lsmash_channel_label = 65540 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_5 : lsmash_channel_label = 65541 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_6 : lsmash_channel_label = 65542 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_7 : lsmash_channel_label = 65543 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_8 : lsmash_channel_label = 65544 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_9 : lsmash_channel_label = 65545 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_10 : lsmash_channel_label = 65546 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_11 : lsmash_channel_label = 65547 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_12 : lsmash_channel_label = 65548 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_13 : lsmash_channel_label = 65549 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_14 : lsmash_channel_label = 65550 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_15 : lsmash_channel_label = 65551 ; pub const lsmash_channel_label_QT_CHANNEL_LABEL_DISCRETE_65535 : lsmash_channel_label = 131071 ; pub type lsmash_channel_label = i32 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_LEFT : lsmash_channel_bitmap = 1 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_RIGHT : lsmash_channel_bitmap = 2 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_CENTER : lsmash_channel_bitmap = 4 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_LFE_SCREEN : lsmash_channel_bitmap = 8 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_LEFT_SURROUND : lsmash_channel_bitmap = 16 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_RIGHT_SURROUND : lsmash_channel_bitmap = 32 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_LEFT_CENTER : lsmash_channel_bitmap = 64 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_RIGHT_CENTER : lsmash_channel_bitmap = 128 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_CENTER_SURROUND : lsmash_channel_bitmap = 256 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_LEFT_SURROUND_DIRECT : lsmash_channel_bitmap = 512 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_RIGHT_SURROUND_DIRECT : lsmash_channel_bitmap = 1024 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_TOP_CENTER_SURROUND : lsmash_channel_bitmap = 2048 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_VERTICAL_HEIGHT_LEFT : lsmash_channel_bitmap = 4096 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_VERTICAL_HEIGHT_CENTER : lsmash_channel_bitmap = 8192 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_VERTICAL_HEIGHT_RIGHT : lsmash_channel_bitmap = 16384 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_TOP_BACK_LEFT : lsmash_channel_bitmap = 32768 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_TOP_BACK_CENTER : lsmash_channel_bitmap = 65536 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_TOP_BACK_RIGHT : lsmash_channel_bitmap = 131072 ; pub const lsmash_channel_bitmap_QT_CHANNEL_BIT_FULL : lsmash_channel_bitmap = 262143 ; pub type lsmash_channel_bitmap = u32 ; pub const lsmash_channel_flags_QT_CHANNEL_FLAGS_ALL_OFF : lsmash_channel_flags = 0 ; pub const lsmash_channel_flags_QT_CHANNEL_FLAGS_RECTANGULAR_COORDINATES : lsmash_channel_flags = 1 ; pub const lsmash_channel_flags_QT_CHANNEL_FLAGS_SPHERICAL_COORDINATES : lsmash_channel_flags = 2 ; pub const lsmash_channel_flags_QT_CHANNEL_FLAGS_METERS : lsmash_channel_flags = 4 ; pub type lsmash_channel_flags = u32 ; pub const lsmash_channel_coordinates_index_QT_CHANNEL_COORDINATES_LEFT_RIGHT : lsmash_channel_coordinates_index = 0 ; pub const lsmash_channel_coordinates_index_QT_CHANNEL_COORDINATES_BACK_FRONT : lsmash_channel_coordinates_index = 1 ; pub const lsmash_channel_coordinates_index_QT_CHANNEL_COORDINATES_DOWN_UP : lsmash_channel_coordinates_index = 2 ; pub const lsmash_channel_coordinates_index_QT_CHANNEL_COORDINATES_AZIMUTH : lsmash_channel_coordinates_index = 0 ; pub const lsmash_channel_coordinates_index_QT_CHANNEL_COORDINATES_ELEVATION : lsmash_channel_coordinates_index = 1 ; pub const lsmash_channel_coordinates_index_QT_CHANNEL_COORDINATES_DISTANCE : lsmash_channel_coordinates_index = 2 ; pub type lsmash_channel_coordinates_index = u32 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_USE_CHANNEL_DESCRIPTIONS : lsmash_channel_layout_tag = 0 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_USE_CHANNEL_BITMAP : lsmash_channel_layout_tag = 65536 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MONO : lsmash_channel_layout_tag = 6553601 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_STEREO : lsmash_channel_layout_tag = 6619138 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_STEREO_HEADPHONES : lsmash_channel_layout_tag = 6684674 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MATRIX_STEREO : lsmash_channel_layout_tag = 6750210 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MID_SIDE : lsmash_channel_layout_tag = 6815746 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_XY : lsmash_channel_layout_tag = 6881282 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_BINAURAL : lsmash_channel_layout_tag = 6946818 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AMBISONIC_B_FORMAT : lsmash_channel_layout_tag = 7012356 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_QUADRAPHONIC : lsmash_channel_layout_tag = 7077892 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_PENTAGONAL : lsmash_channel_layout_tag = 7143429 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_HEXAGONAL : lsmash_channel_layout_tag = 7208966 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_OCTAGONAL : lsmash_channel_layout_tag = 7274504 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_CUBE : lsmash_channel_layout_tag = 7340040 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_1_0 : lsmash_channel_layout_tag = 6553601 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_2_0 : lsmash_channel_layout_tag = 6619138 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_3_0_A : lsmash_channel_layout_tag = 7405571 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_3_0_B : lsmash_channel_layout_tag = 7471107 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_4_0_A : lsmash_channel_layout_tag = 7536644 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_4_0_B : lsmash_channel_layout_tag = 7602180 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_0_A : lsmash_channel_layout_tag = 7667717 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_0_B : lsmash_channel_layout_tag = 7733253 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_0_C : lsmash_channel_layout_tag = 7798789 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_0_D : lsmash_channel_layout_tag = 7864325 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_1_A : lsmash_channel_layout_tag = 7929862 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_1_B : lsmash_channel_layout_tag = 7995398 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_1_C : lsmash_channel_layout_tag = 8060934 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_5_1_D : lsmash_channel_layout_tag = 8126470 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_6_1_A : lsmash_channel_layout_tag = 8192007 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_7_1_A : lsmash_channel_layout_tag = 8257544 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_7_1_B : lsmash_channel_layout_tag = 8323080 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_MPEG_7_1_C : lsmash_channel_layout_tag = 8388616 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EMAGIC_DEFAULT_7_1 : lsmash_channel_layout_tag = 8454152 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_SMPTE_DTV : lsmash_channel_layout_tag = 8519688 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_1_0 : lsmash_channel_layout_tag = 6553601 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_2_0 : lsmash_channel_layout_tag = 6619138 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_2_1 : lsmash_channel_layout_tag = 8585219 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_2_2 : lsmash_channel_layout_tag = 8650756 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_3_0 : lsmash_channel_layout_tag = 7405571 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_3_1 : lsmash_channel_layout_tag = 7536644 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_3_2 : lsmash_channel_layout_tag = 7667717 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_3_2_1 : lsmash_channel_layout_tag = 7929862 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ITU_3_4_1 : lsmash_channel_layout_tag = 8388616 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_0 : lsmash_channel_layout_tag = 6553601 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_1 : lsmash_channel_layout_tag = 6619138 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_2 : lsmash_channel_layout_tag = 8585219 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_3 : lsmash_channel_layout_tag = 8650756 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_4 : lsmash_channel_layout_tag = 8716291 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_5 : lsmash_channel_layout_tag = 8781828 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_6 : lsmash_channel_layout_tag = 8847365 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_7 : lsmash_channel_layout_tag = 7405571 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_8 : lsmash_channel_layout_tag = 7536644 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_9 : lsmash_channel_layout_tag = 7667717 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_10 : lsmash_channel_layout_tag = 8912900 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_11 : lsmash_channel_layout_tag = 8978437 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_12 : lsmash_channel_layout_tag = 7929862 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_13 : lsmash_channel_layout_tag = 7536644 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_14 : lsmash_channel_layout_tag = 7667717 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_15 : lsmash_channel_layout_tag = 8912900 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_16 : lsmash_channel_layout_tag = 8978437 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_17 : lsmash_channel_layout_tag = 7929862 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_18 : lsmash_channel_layout_tag = 9043973 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_19 : lsmash_channel_layout_tag = 7733253 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DVD_20 : lsmash_channel_layout_tag = 7995398 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_4 : lsmash_channel_layout_tag = 7077892 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_5 : lsmash_channel_layout_tag = 7143429 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_6 : lsmash_channel_layout_tag = 7208966 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_8 : lsmash_channel_layout_tag = 7274504 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_5_0 : lsmash_channel_layout_tag = 7733253 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_6_0 : lsmash_channel_layout_tag = 9109510 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_7_0 : lsmash_channel_layout_tag = 9175047 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_7_0_FRONT : lsmash_channel_layout_tag = 9699335 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_5_1 : lsmash_channel_layout_tag = 7929862 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_6_1 : lsmash_channel_layout_tag = 8192007 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_7_1 : lsmash_channel_layout_tag = 8388616 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AUDIO_UNIT_7_1_FRONT : lsmash_channel_layout_tag = 8257544 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_3_0 : lsmash_channel_layout_tag = 7471107 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_QUADRAPHONIC : lsmash_channel_layout_tag = 7077892 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_4_0 : lsmash_channel_layout_tag = 7602180 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_5_0 : lsmash_channel_layout_tag = 7864325 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_5_1 : lsmash_channel_layout_tag = 8126470 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_6_0 : lsmash_channel_layout_tag = 9240582 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_6_1 : lsmash_channel_layout_tag = 9306119 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_7_0 : lsmash_channel_layout_tag = 9371655 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_7_1 : lsmash_channel_layout_tag = 8323080 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AAC_OCTAGONAL : lsmash_channel_layout_tag = 9437192 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_TMH_10_2_STD : lsmash_channel_layout_tag = 9502736 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_TMH_10_2_FULL : lsmash_channel_layout_tag = 9568277 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AC3_1_0_1 : lsmash_channel_layout_tag = 9764866 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AC3_3_0 : lsmash_channel_layout_tag = 9830403 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AC3_3_1 : lsmash_channel_layout_tag = 9895940 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AC3_3_0_1 : lsmash_channel_layout_tag = 9961476 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AC3_2_1_1 : lsmash_channel_layout_tag = 10027012 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_AC3_3_1_1 : lsmash_channel_layout_tag = 10092549 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC_6_0_A : lsmash_channel_layout_tag = 10158086 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC_7_0_A : lsmash_channel_layout_tag = 10223623 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_6_1_A : lsmash_channel_layout_tag = 10289159 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_6_1_B : lsmash_channel_layout_tag = 10354695 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_6_1_C : lsmash_channel_layout_tag = 10420231 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_A : lsmash_channel_layout_tag = 10485768 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_B : lsmash_channel_layout_tag = 10551304 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_C : lsmash_channel_layout_tag = 10616840 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_D : lsmash_channel_layout_tag = 10682376 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_E : lsmash_channel_layout_tag = 10747912 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_F : lsmash_channel_layout_tag = 10813448 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_G : lsmash_channel_layout_tag = 10878984 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_EAC3_7_1_H : lsmash_channel_layout_tag = 10944520 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_3_1 : lsmash_channel_layout_tag = 11010052 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_4_1 : lsmash_channel_layout_tag = 11075589 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_0_A : lsmash_channel_layout_tag = 11141126 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_0_B : lsmash_channel_layout_tag = 11206662 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_0_C : lsmash_channel_layout_tag = 11272198 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_1_A : lsmash_channel_layout_tag = 11337735 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_1_B : lsmash_channel_layout_tag = 11403271 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_1_C : lsmash_channel_layout_tag = 11468807 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_7_0 : lsmash_channel_layout_tag = 11534343 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_7_1 : lsmash_channel_layout_tag = 11599880 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_8_0_A : lsmash_channel_layout_tag = 11665416 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_8_0_B : lsmash_channel_layout_tag = 11730952 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_8_1_A : lsmash_channel_layout_tag = 11796489 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_8_1_B : lsmash_channel_layout_tag = 11862025 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DTS_6_1_D : lsmash_channel_layout_tag = 11927559 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_MONO : lsmash_channel_layout_tag = 6553601 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_STEREO : lsmash_channel_layout_tag = 6619138 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_3_0 : lsmash_channel_layout_tag = 7471107 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_4_0 : lsmash_channel_layout_tag = 7602180 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_5_0 : lsmash_channel_layout_tag = 7864325 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_5_1 : lsmash_channel_layout_tag = 8126470 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_6_1 : lsmash_channel_layout_tag = 9306119 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_ALAC_7_1 : lsmash_channel_layout_tag = 8323080 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_DISCRETE_IN_ORDER : lsmash_channel_layout_tag = 9633792 ; pub const lsmash_channel_layout_tag_QT_CHANNEL_LAYOUT_UNKNOWN : lsmash_channel_layout_tag = -65536 ; pub type lsmash_channel_layout_tag = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_audio_channel_layout_t { pub channelLayoutTag : lsmash_channel_layout_tag , pub channelBitmap : lsmash_channel_bitmap , } # [ test ] fn bindgen_test_layout_lsmash_qt_audio_channel_layout_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_audio_channel_layout_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_audio_channel_layout_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_audio_channel_layout_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_audio_channel_layout_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_audio_channel_layout_t > ( ) ) ) . channelLayoutTag as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_audio_channel_layout_t ) , "::" , stringify ! ( channelLayoutTag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_audio_channel_layout_t > ( ) ) ) . channelBitmap as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_audio_channel_layout_t ) , "::" , stringify ! ( channelBitmap ) ) ) ; } pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_FLOAT : lsmash_qt_audio_format_specific_flag = 1 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_BIG_ENDIAN : lsmash_qt_audio_format_specific_flag = 2 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_SIGNED_INTEGER : lsmash_qt_audio_format_specific_flag = 4 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_PACKED : lsmash_qt_audio_format_specific_flag = 8 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_ALIGNED_HIGH : lsmash_qt_audio_format_specific_flag = 16 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_NON_INTERLEAVED : lsmash_qt_audio_format_specific_flag = 32 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_NON_MIXABLE : lsmash_qt_audio_format_specific_flag = 64 ; pub const lsmash_qt_audio_format_specific_flag_QT_AUDIO_FORMAT_FLAG_ALL_CLEAR : lsmash_qt_audio_format_specific_flag = -2147483648 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_FLOAT : lsmash_qt_audio_format_specific_flag = 1 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_BIG_ENDIAN : lsmash_qt_audio_format_specific_flag = 2 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_SIGNED_INTEGER : lsmash_qt_audio_format_specific_flag = 4 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_PACKED : lsmash_qt_audio_format_specific_flag = 8 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_ALIGNED_HIGH : lsmash_qt_audio_format_specific_flag = 16 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_NON_INTERLEAVED : lsmash_qt_audio_format_specific_flag = 32 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_NON_MIXABLE : lsmash_qt_audio_format_specific_flag = 64 ; pub const lsmash_qt_audio_format_specific_flag_QT_LPCM_FORMAT_FLAG_ALL_CLEAR : lsmash_qt_audio_format_specific_flag = -2147483648 ; pub const lsmash_qt_audio_format_specific_flag_QT_ALAC_FORMAT_FLAG_16BIT_SOURCE_DATA : lsmash_qt_audio_format_specific_flag = 1 ; pub const lsmash_qt_audio_format_specific_flag_QT_ALAC_FORMAT_FLAG_20BIT_SOURCE_DATA : lsmash_qt_audio_format_specific_flag = 2 ; pub const lsmash_qt_audio_format_specific_flag_QT_ALAC_FORMAT_FLAG_24BIT_SOURCE_DATA : lsmash_qt_audio_format_specific_flag = 3 ; pub const lsmash_qt_audio_format_specific_flag_QT_ALAC_FORMAT_FLAG_32BIT_SOURCE_DATA : lsmash_qt_audio_format_specific_flag = 4 ; pub type lsmash_qt_audio_format_specific_flag = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_qt_audio_format_specific_flags_t { pub format_flags : lsmash_qt_audio_format_specific_flag , } # [ test ] fn bindgen_test_layout_lsmash_qt_audio_format_specific_flags_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_qt_audio_format_specific_flags_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( lsmash_qt_audio_format_specific_flags_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_qt_audio_format_specific_flags_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( lsmash_qt_audio_format_specific_flags_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_qt_audio_format_specific_flags_t > ( ) ) ) . format_flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_qt_audio_format_specific_flags_t ) , "::" , stringify ! ( format_flags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_codec_global_header_t { pub header_size : u32 , pub header_data : * mut u8 , } # [ test ] fn bindgen_test_layout_lsmash_codec_global_header_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_codec_global_header_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_codec_global_header_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_codec_global_header_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_codec_global_header_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_global_header_t > ( ) ) ) . header_size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_global_header_t ) , "::" , stringify ! ( header_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_codec_global_header_t > ( ) ) ) . header_data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_codec_global_header_t ) , "::" , stringify ! ( header_data ) ) ) ; } pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ALBUM_NAME : lsmash_itunes_metadata_item = -1453233054 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ARTIST : lsmash_itunes_metadata_item = -1455336876 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_USER_COMMENT : lsmash_itunes_metadata_item = -1453101708 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_RELEASE_DATE : lsmash_itunes_metadata_item = -1453039239 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ENCODED_BY : lsmash_itunes_metadata_item = -1452970397 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_USER_GENRE : lsmash_itunes_metadata_item = -1452841618 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_GROUPING : lsmash_itunes_metadata_item = -1452838288 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_LYRICS : lsmash_itunes_metadata_item = -1452508814 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TITLE : lsmash_itunes_metadata_item = -1452383891 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TRACK_SUBTITLE : lsmash_itunes_metadata_item = -1452051405 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ENCODING_TOOL : lsmash_itunes_metadata_item = -1451987089 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_COMPOSER : lsmash_itunes_metadata_item = -1451789708 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ALBUM_ARTIST : lsmash_itunes_metadata_item = 1631670868 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_PODCAST_CATEGORY : lsmash_itunes_metadata_item = 1667331175 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_COPYRIGHT : lsmash_itunes_metadata_item = 1668313716 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_DESCRIPTION : lsmash_itunes_metadata_item = 1684370275 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_GROUPING_DRAFT : lsmash_itunes_metadata_item = 1735554416 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_PODCAST_KEYWORD : lsmash_itunes_metadata_item = 1801812343 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_LONG_DESCRIPTION : lsmash_itunes_metadata_item = 1818518899 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_PURCHASE_DATE : lsmash_itunes_metadata_item = 1886745188 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TV_EPISODE_ID : lsmash_itunes_metadata_item = 1953916270 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TV_NETWORK : lsmash_itunes_metadata_item = 1953918574 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TV_SHOW_NAME : lsmash_itunes_metadata_item = 1953919848 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_PURCHASE_ACCOUNT_ID : lsmash_itunes_metadata_item = 1634748740 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_SORT_ALBUM : lsmash_itunes_metadata_item = 1936679276 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_SORT_ARTIST : lsmash_itunes_metadata_item = 1936679282 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_SORT_ALBUM_ARTIST : lsmash_itunes_metadata_item = 1936679265 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_SORT_COMPOSER : lsmash_itunes_metadata_item = 1936679791 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_SORT_NAME : lsmash_itunes_metadata_item = 1936682605 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_SORT_SHOW : lsmash_itunes_metadata_item = 1936683886 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_EPISODE_GLOBAL_ID : lsmash_itunes_metadata_item = 1701276004 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_PREDEFINED_GENRE : lsmash_itunes_metadata_item = 1735291493 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_PODCAST_URL : lsmash_itunes_metadata_item = 1886745196 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_CONTENT_RATING : lsmash_itunes_metadata_item = 1920233063 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_MEDIA_TYPE : lsmash_itunes_metadata_item = 1937009003 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_BEATS_PER_MINUTE : lsmash_itunes_metadata_item = 1953329263 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TV_EPISODE : lsmash_itunes_metadata_item = 1953916275 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TV_SEASON : lsmash_itunes_metadata_item = 1953919854 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_ACCOUNT_TYPE : lsmash_itunes_metadata_item = 1634421060 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_ARTIST_ID : lsmash_itunes_metadata_item = 1635010884 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_COMPOSER_ID : lsmash_itunes_metadata_item = 1668106564 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_CATALOG_ID : lsmash_itunes_metadata_item = 1668172100 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_TV_GENRE_ID : lsmash_itunes_metadata_item = 1734691140 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_PLAYLIST_ID : lsmash_itunes_metadata_item = 1886144836 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_ITUNES_COUNTRY_CODE : lsmash_itunes_metadata_item = 1936083268 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_DISC_COMPILATION : lsmash_itunes_metadata_item = 1668311404 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_HIGH_DEFINITION_VIDEO : lsmash_itunes_metadata_item = 1751414372 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_PODCAST : lsmash_itunes_metadata_item = 1885565812 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_GAPLESS_PLAYBACK : lsmash_itunes_metadata_item = 1885823344 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_COVER_ART : lsmash_itunes_metadata_item = 1668249202 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_DISC_NUMBER : lsmash_itunes_metadata_item = 1684632427 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_TRACK_NUMBER : lsmash_itunes_metadata_item = 1953655662 ; pub const lsmash_itunes_metadata_item_ITUNES_METADATA_ITEM_CUSTOM : lsmash_itunes_metadata_item = 757935405 ; 
 /// iTunes Metadata 
 pub type lsmash_itunes_metadata_item = i32 ; pub const lsmash_itunes_metadata_type_ITUNES_METADATA_TYPE_NONE : lsmash_itunes_metadata_type = 0 ; pub const lsmash_itunes_metadata_type_ITUNES_METADATA_TYPE_STRING : lsmash_itunes_metadata_type = 1 ; pub const lsmash_itunes_metadata_type_ITUNES_METADATA_TYPE_INTEGER : lsmash_itunes_metadata_type = 2 ; pub const lsmash_itunes_metadata_type_ITUNES_METADATA_TYPE_BOOLEAN : lsmash_itunes_metadata_type = 3 ; pub const lsmash_itunes_metadata_type_ITUNES_METADATA_TYPE_BINARY : lsmash_itunes_metadata_type = 4 ; pub type lsmash_itunes_metadata_type = u32 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_IMPLICIT : lsmash_itunes_metadata_subtype = 0 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_UTF8 : lsmash_itunes_metadata_subtype = 1 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_UTF16 : lsmash_itunes_metadata_subtype = 2 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_SJIS : lsmash_itunes_metadata_subtype = 3 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_HTML : lsmash_itunes_metadata_subtype = 6 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_XML : lsmash_itunes_metadata_subtype = 7 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_UUID : lsmash_itunes_metadata_subtype = 8 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_ISRC : lsmash_itunes_metadata_subtype = 9 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_MI3P : lsmash_itunes_metadata_subtype = 10 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_GIF : lsmash_itunes_metadata_subtype = 12 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_JPEG : lsmash_itunes_metadata_subtype = 13 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_PNG : lsmash_itunes_metadata_subtype = 14 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_URL : lsmash_itunes_metadata_subtype = 15 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_DURATION : lsmash_itunes_metadata_subtype = 16 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_TIME : lsmash_itunes_metadata_subtype = 17 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_GENRES : lsmash_itunes_metadata_subtype = 18 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_INTEGER : lsmash_itunes_metadata_subtype = 21 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_RIAAPA : lsmash_itunes_metadata_subtype = 24 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_UPC : lsmash_itunes_metadata_subtype = 25 ; pub const lsmash_itunes_metadata_subtype_ITUNES_METADATA_SUBTYPE_BMP : lsmash_itunes_metadata_subtype = 27 ; pub type lsmash_itunes_metadata_subtype = u32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union lsmash_itunes_metadata_value_t { pub string : * mut :: std :: os :: raw :: c_char , pub integer : u64 , pub boolean : lsmash_boolean_t , pub binary : lsmash_itunes_metadata_value_t__bindgen_ty_1 , _bindgen_union_align : [ u64 ; 2usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lsmash_itunes_metadata_value_t__bindgen_ty_1 { pub subtype : lsmash_itunes_metadata_subtype , pub size : u32 , pub data : * mut u8 , } # [ test ] fn bindgen_test_layout_lsmash_itunes_metadata_value_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_itunes_metadata_value_t__bindgen_ty_1 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_itunes_metadata_value_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_itunes_metadata_value_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_itunes_metadata_value_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t__bindgen_ty_1 > ( ) ) ) . subtype as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t__bindgen_ty_1 ) , "::" , stringify ! ( subtype ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t__bindgen_ty_1 > ( ) ) ) . size as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t__bindgen_ty_1 ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t__bindgen_ty_1 > ( ) ) ) . data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t__bindgen_ty_1 ) , "::" , stringify ! ( data ) ) ) ; } # [ test ] fn bindgen_test_layout_lsmash_itunes_metadata_value_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_itunes_metadata_value_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lsmash_itunes_metadata_value_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_itunes_metadata_value_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_itunes_metadata_value_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t > ( ) ) ) . string as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t ) , "::" , stringify ! ( string ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t > ( ) ) ) . integer as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t ) , "::" , stringify ! ( integer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t > ( ) ) ) . boolean as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t ) , "::" , stringify ! ( boolean ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_value_t > ( ) ) ) . binary as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_value_t ) , "::" , stringify ! ( binary ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct lsmash_itunes_metadata_t { pub item : lsmash_itunes_metadata_item , pub type_ : lsmash_itunes_metadata_type , pub value : lsmash_itunes_metadata_value_t , pub meaning : * mut :: std :: os :: raw :: c_char , pub name : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_lsmash_itunes_metadata_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lsmash_itunes_metadata_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( lsmash_itunes_metadata_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lsmash_itunes_metadata_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lsmash_itunes_metadata_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_t > ( ) ) ) . item as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_t ) , "::" , stringify ! ( item ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_t > ( ) ) ) . type_ as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_t ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_t > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_t ) , "::" , stringify ! ( value ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_t > ( ) ) ) . meaning as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_t ) , "::" , stringify ! ( meaning ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lsmash_itunes_metadata_t > ( ) ) ) . name as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( lsmash_itunes_metadata_t ) , "::" , stringify ! ( name ) ) ) ; } extern "C" { # [ link_name = "\u{1}_lsmash_set_itunes_metadata" ] pub fn lsmash_set_itunes_metadata ( root : * mut lsmash_root_t , metadata : lsmash_itunes_metadata_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_count_itunes_metadata" ] pub fn lsmash_count_itunes_metadata ( root : * mut lsmash_root_t ) -> u32 ; } extern "C" { # [ link_name = "\u{1}_lsmash_get_itunes_metadata" ] pub fn lsmash_get_itunes_metadata ( root : * mut lsmash_root_t , metadata_number : u32 , metadata : * mut lsmash_itunes_metadata_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_cleanup_itunes_metadata" ] pub fn lsmash_cleanup_itunes_metadata ( metadata : * mut lsmash_itunes_metadata_t ) ; } extern "C" { 
 /// Others 
 # [ link_name = "\u{1}_lsmash_set_copyright" ] pub fn lsmash_set_copyright ( root : * mut lsmash_root_t , track_ID : u32 , ISO_language : u16 , notice : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_lsmash_create_object_descriptor" ] pub fn lsmash_create_object_descriptor ( root : * mut lsmash_root_t ) -> :: std :: os :: raw :: c_int ; } pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; }